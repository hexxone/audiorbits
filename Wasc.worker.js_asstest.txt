{"_source":{"_children":[{"_valueIsBuffer":false,"_value":"/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\nvar hxqnr31 = {};\n"},{"_source":{"_children":[{"_valueIsBuffer":false,"_value":"\n;// CONCATENATED MODULE: ./src/we_utils/src/wasc-worker/WascLoader.ts\n"},{"_source":{"_source":{"_source":{"_valueIsBuffer":false,"_value":"export class WascLoader {\r\n    constructor() {\r\n        this._internal_ID_OFFSET = -8;\r\n        this._internal_SIZE_OFFSET = -4;\r\n        this._internal_ARRAYBUFFER_ID = 0;\r\n        this._internal_STRING_ID = 1;\r\n        this._internal_ARRAYBUFFERVIEW = 1 << 0;\r\n        this._internal_ARRAY = 1 << 1;\r\n        this._internal_STATICARRAY = 1 << 2;\r\n        this._internal_VAL_ALIGN_OFFSET = 6;\r\n        this._internal_VAL_SIGNED = 1 << 11;\r\n        this._internal_VAL_FLOAT = 1 << 12;\r\n        this._internal_VAL_MANAGED = 1 << 14;\r\n        this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\r\n        this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\r\n        this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\r\n        this._internal_ARRAYBUFFERVIEW_SIZE = 12;\r\n        this._internal_ARRAY_LENGTH_OFFSET = 12;\r\n        this._internal_ARRAY_SIZE = 16;\r\n        this._internal__THIS = Symbol();\r\n        this._internal_STRING_DECODE_THRESHOLD = 32;\r\n        this._internal_decoder = new TextDecoder('utf-16le');\r\n        this._internal_E_NOEXPORTRUNTIME = 'Operation requires compiling with --exportRuntime';\r\n    }\r\n    _private_err_noRuntime() {\r\n        throw Error(this._internal_E_NOEXPORTRUNTIME);\r\n    }\r\n    ;\r\n    _private_getStringImpl(buffer, ptr) {\r\n        const len = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2] >>> 1;\r\n        const arr = new Uint16Array(buffer, ptr, len);\r\n        if (len <= this._internal_STRING_DECODE_THRESHOLD) {\r\n            return String.fromCharCode(...arr);\r\n        }\r\n        return this._internal_decoder.decode(arr);\r\n    }\r\n    _private_preInstantiate(imports) {\r\n        const extendedExports = {};\r\n        const getString = (memory, ptr) => {\r\n            if (!memory)\r\n                return '<yet unknown>';\r\n            return this._private_getStringImpl(memory.buffer, ptr);\r\n        };\r\n        const env = (imports.env = imports.env || {});\r\n        env.abort = env.abort || function abort(msg, file, line, colm) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\r\n        };\r\n        env.trace = env.trace || function trace(msg, n, ...args) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            console.log(`trace: ${getString(memory, msg)}${n ? ' ' : ''}${args.slice(0, n).join(', ')}`);\r\n        };\r\n        env.seed = env.seed || Date.now;\r\n        imports.Math = imports.Math || Math;\r\n        imports.Date = imports.Date || Date;\r\n        return extendedExports;\r\n    }\r\n    _private_postInstantiate(extendedExports, instance) {\r\n        const exports = instance.exports;\r\n        const memory = exports.memory;\r\n        const table = exports.table;\r\n        const __new = (exports.__new || this._private_err_noRuntime);\r\n        const __collect = (exports.__collect || this._private_err_noRuntime);\r\n        const __pin = (exports.__pin || this._private_err_noRuntime);\r\n        const __unpin = (exports.__unpin || this._private_err_noRuntime);\r\n        const __rtti_base = (exports.__rtti_base);\r\n        const getRttiCount = __rtti_base ?\r\n            function (arr) {\r\n                return arr[__rtti_base >>> 2];\r\n            } :\r\n            this._private_err_noRuntime;\r\n        const getInfo = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2];\r\n        };\r\n        const getArrayInfo = (id) => {\r\n            const info = getInfo(id);\r\n            if (!(info & (this._internal_ARRAYBUFFERVIEW | this._internal_ARRAY | this._internal_STATICARRAY)))\r\n                throw Error(`not an array: ${id}, flags=${info}`);\r\n            return info;\r\n        };\r\n        const getBase = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];\r\n        };\r\n        const getValueAlign = (info) => {\r\n            return 31 - Math.clz32((info >>> this._internal_VAL_ALIGN_OFFSET) & 31);\r\n        };\r\n        const getView = (alignLog2, signed, float) => {\r\n            const buffer = memory.buffer;\r\n            if (float) {\r\n                switch (alignLog2) {\r\n                    case 2: return new Float32Array(buffer);\r\n                    case 3: return new Float64Array(buffer);\r\n                }\r\n            }\r\n            else {\r\n                switch (alignLog2) {\r\n                    case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\r\n                    case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\r\n                    case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\r\n                    case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\r\n                }\r\n            }\r\n            throw Error(`unsupported align: ${alignLog2}`);\r\n        };\r\n        const getTypedArray = (Type, alignLog2, ptr) => {\r\n            return new Type(getTypedArrayView(Type, alignLog2, ptr));\r\n        };\r\n        const getTypedArrayView = (Type, alignLog2, ptr) => {\r\n            const buffer = memory.buffer;\r\n            const U32 = new Uint32Array(buffer);\r\n            const bufPtr = U32[ptr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            return new Type(buffer, bufPtr, U32[bufPtr + this._internal_SIZE_OFFSET >>> 2] >>> alignLog2);\r\n        };\r\n        const attachTypedArrayFunctions = (ctor, name, align) => {\r\n            extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\r\n            extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\r\n        };\r\n        const __newString = (str) => {\r\n            if (str == null)\r\n                return 0;\r\n            const length = str.length;\r\n            const ptr = __new(length << 1, this._internal_STRING_ID);\r\n            const U16 = new Uint16Array(memory.buffer);\r\n            for (let i = 0, p = ptr >>> 1; i < length; ++i)\r\n                U16[p + i] = str.charCodeAt(i);\r\n            return ptr;\r\n        };\r\n        const __getString = (ptr) => {\r\n            if (!ptr)\r\n                return null;\r\n            const buffer = memory.buffer;\r\n            const id = new Uint32Array(buffer)[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id !== this._internal_STRING_ID)\r\n                throw Error(`not a string: ${ptr}`);\r\n            return this._private_getStringImpl(buffer, ptr);\r\n        };\r\n        const __newArray = (id, values) => {\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            const length = values.length;\r\n            const buf = __new(length << align, info & this._internal_STATICARRAY ? id : this._internal_ARRAYBUFFER_ID);\r\n            let result;\r\n            if (info & this._internal_STATICARRAY) {\r\n                result = buf;\r\n            }\r\n            else {\r\n                __pin(buf);\r\n                const arr = __new(info & this._internal_ARRAY ? this._internal_ARRAY_SIZE : this._internal_ARRAYBUFFERVIEW_SIZE, id);\r\n                __unpin(buf);\r\n                const U32 = new Uint32Array(memory.buffer);\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\r\n                if (info & this._internal_ARRAY)\r\n                    U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] = length;\r\n                result = arr;\r\n            }\r\n            const view = getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT);\r\n            if (info & this._internal_VAL_MANAGED) {\r\n                for (let i = 0; i < length; ++i) {\r\n                    const value = values[i];\r\n                    view[(buf >>> align) + i] = value;\r\n                }\r\n            }\r\n            else {\r\n                view.set(values, buf >>> align);\r\n            }\r\n            return result;\r\n        };\r\n        const __getArrayView = (arr) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const id = U32[arr + this._internal_ID_OFFSET >>> 2];\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            let buf = info & this._internal_STATICARRAY ?\r\n                arr :\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            const length = info & this._internal_ARRAY ?\r\n                U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] :\r\n                U32[buf + this._internal_SIZE_OFFSET >>> 2] >>> align;\r\n            return getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT).subarray(buf >>>= align, buf + length);\r\n        };\r\n        const __getArray = (arr) => {\r\n            const input = __getArrayView(arr);\r\n            const len = input.length;\r\n            const out = new Array(len);\r\n            for (let i = 0; i < len; i++)\r\n                out[i] = input[i];\r\n            return out;\r\n        };\r\n        const __getArrayBuffer = (ptr) => {\r\n            const buffer = memory.buffer;\r\n            const length = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2];\r\n            return buffer.slice(ptr, ptr + length);\r\n        };\r\n        const __instanceof = (ptr, baseId) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            let id = U32[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id <= getRttiCount(U32)) {\r\n                do {\r\n                    if (id == baseId)\r\n                        return true;\r\n                    id = getBase(id);\r\n                } while (id);\r\n            }\r\n            return false;\r\n        };\r\n        extendedExports.__new = __new;\r\n        extendedExports.__pin = __pin;\r\n        extendedExports.__unpin = __unpin;\r\n        extendedExports.__collect = __collect;\r\n        extendedExports.__newString = __newString;\r\n        extendedExports.__getString = __getString;\r\n        extendedExports.__newArray = __newArray;\r\n        extendedExports.__getArrayView = __getArrayView;\r\n        extendedExports.__getArray = __getArray;\r\n        extendedExports.__getArrayBuffer = __getArrayBuffer;\r\n        extendedExports.__instanceof = __instanceof;\r\n        [\r\n            Int8Array,\r\n            Uint8Array,\r\n            Uint8ClampedArray,\r\n            Int16Array,\r\n            Uint16Array,\r\n            Int32Array,\r\n            Uint32Array,\r\n            Float32Array,\r\n            Float64Array,\r\n        ].forEach((ctor) => {\r\n            attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\r\n        });\r\n        if (typeof BigUint64Array !== 'undefined') {\r\n            [BigUint64Array, BigInt64Array].forEach((ctor) => {\r\n                attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\r\n            });\r\n        }\r\n        extendedExports.memory = extendedExports.memory || memory;\r\n        extendedExports.table = extendedExports.table || table;\r\n        return this._private_demangle(exports, extendedExports);\r\n    }\r\n    _private_isResponse(src) {\r\n        return typeof Response !== 'undefined' && src instanceof Response;\r\n    }\r\n    _private_isModule(src) {\r\n        return src instanceof WebAssembly.Module;\r\n    }\r\n    _private_demangle(exports, extendedExports = {}) {\r\n        const setArgumentsLength = exports['__argumentsLength'] ?\r\n            (length) => {\r\n                exports['__argumentsLength'].value = length;\r\n            } :\r\n            exports['__setArgumentsLength'] || exports['__setargc'] || (() => { });\r\n        for (const internalName in exports) {\r\n            if (!Object.prototype.hasOwnProperty.call(exports, internalName))\r\n                continue;\r\n            const elem = exports[internalName];\r\n            const parts = internalName.split('.');\r\n            let curr = extendedExports;\r\n            while (parts.length > 1) {\r\n                const part = parts.shift();\r\n                if (!Object.prototype.hasOwnProperty.call(curr, part))\r\n                    curr[part] = {};\r\n                curr = curr[part];\r\n            }\r\n            let name = parts[0];\r\n            const hash = name.indexOf('#');\r\n            if (hash >= 0) {\r\n                const className = name.substring(0, hash);\r\n                const classElem = curr[className];\r\n                if (typeof classElem === 'undefined' || !classElem.prototype) {\r\n                    const ctor = function (...args) {\r\n                        return ctor._internal_wrap(ctor.prototype.constructor(0, ...args));\r\n                    };\r\n                    ctor.prototype = {\r\n                        _internal_valueOf() {\r\n                            return this[this._THIS];\r\n                        },\r\n                    };\r\n                    ctor._internal_wrap = function (thisValue) {\r\n                        return Object.create(ctor.prototype, { [this._THIS]: { value: thisValue, writable: false } });\r\n                    };\r\n                    if (classElem) {\r\n                        Object.getOwnPropertyNames(classElem).forEach((name) => Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name)));\r\n                    }\r\n                    curr[className] = ctor;\r\n                }\r\n                name = name.substring(hash + 1);\r\n                curr = curr[className].prototype;\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        const getter = exports[internalName.replace('set:', 'get:')];\r\n                        const setter = exports[internalName.replace('get:', 'set:')];\r\n                        Object.defineProperty(curr, name, {\r\n                            _internal_get() {\r\n                                return getter(this[this._THIS]);\r\n                            },\r\n                            _internal_set(value) {\r\n                                setter(this[this._THIS], value);\r\n                            },\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    if (name === 'constructor') {\r\n                        (curr[name] = (...args) => {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(...args);\r\n                        }).original = elem;\r\n                    }\r\n                    else {\r\n                        (curr[name] = function (...args) {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(this[this._THIS], ...args);\r\n                        }).original = elem;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        Object.defineProperty(curr, name, {\r\n                            get: exports[internalName.replace('set:', 'get:')],\r\n                            set: exports[internalName.replace('get:', 'set:')],\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else if (typeof elem === 'function' && elem !== setArgumentsLength) {\r\n                    (curr[name] = (...args) => {\r\n                        setArgumentsLength(args.length);\r\n                        return elem(...args);\r\n                    }).original = elem;\r\n                }\r\n                else {\r\n                    curr[name] = elem;\r\n                }\r\n            }\r\n        }\r\n        return extendedExports;\r\n    }\r\n    async instantiate(source, imports = {}) {\r\n        if (this._private_isResponse(source = await source))\r\n            return this.instantiateStreaming(source, imports);\r\n        const module = this._private_isModule(source) ? source : await WebAssembly.compile(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = await WebAssembly.instantiate(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    instantiateSync(source, imports = {}) {\r\n        const module = this._private_isModule(source) ? source : new WebAssembly.Module(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = new WebAssembly.Instance(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    async instantiateStreaming(source, imports = {}) {\r\n        if (!WebAssembly.instantiateStreaming) {\r\n            return this.instantiate(this._private_isResponse(source = await source) ?\r\n                source.arrayBuffer() :\r\n                source, imports);\r\n        }\r\n        const extended = this._private_preInstantiate(imports);\r\n        const result = await WebAssembly.instantiateStreaming(source, imports);\r\n        const exports = this._private_postInstantiate(extended, result.instance);\r\n        return { ...result, exports };\r\n    }\r\n}\r\n","_valueAsBuffer":{"type":"Buffer","data":[101,120,112,111,114,116,32,99,108,97,115,115,32,87,97,115,99,76,111,97,100,101,114,32,123,13,10,32,32,32,32,99,111,110,115,116,114,117,99,116,111,114,40,41,32,123,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,73,68,95,79,70,70,83,69,84,32,61,32,45,56,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,73,90,69,95,79,70,70,83,69,84,32,61,32,45,52,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,95,73,68,32,61,32,48,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,82,73,78,71,95,73,68,32,61,32,49,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,32,61,32,49,32,60,60,32,48,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,32,61,32,49,32,60,60,32,49,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,65,84,73,67,65,82,82,65,89,32,61,32,49,32,60,60,32,50,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,65,76,73,71,78,95,79,70,70,83,69,84,32,61,32,54,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,83,73,71,78,69,68,32,61,32,49,32,60,60,32,49,49,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,70,76,79,65,84,32,61,32,49,32,60,60,32,49,50,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,77,65,78,65,71,69,68,32,61,32,49,32,60,60,32,49,52,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,66,85,70,70,69,82,95,79,70,70,83,69,84,32,61,32,48,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,68,65,84,65,83,84,65,82,84,95,79,70,70,83,69,84,32,61,32,52,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,68,65,84,65,76,69,78,71,84,72,95,79,70,70,83,69,84,32,61,32,56,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,83,73,90,69,32,61,32,49,50,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,95,76,69,78,71,84,72,95,79,70,70,83,69,84,32,61,32,49,50,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,95,83,73,90,69,32,61,32,49,54,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,95,84,72,73,83,32,61,32,83,121,109,98,111,108,40,41,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,82,73,78,71,95,68,69,67,79,68,69,95,84,72,82,69,83,72,79,76,68,32,61,32,51,50,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,100,101,99,111,100,101,114,32,61,32,110,101,119,32,84,101,120,116,68,101,99,111,100,101,114,40,39,117,116,102,45,49,54,108,101,39,41,59,13,10,32,32,32,32,32,32,32,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,69,95,78,79,69,88,80,79,82,84,82,85,78,84,73,77,69,32,61,32,39,79,112,101,114,97,116,105,111,110,32,114,101,113,117,105,114,101,115,32,99,111,109,112,105,108,105,110,103,32,119,105,116,104,32,45,45,101,120,112,111,114,116,82,117,110,116,105,109,101,39,59,13,10,32,32,32,32,125,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,101,114,114,95,110,111,82,117,110,116,105,109,101,40,41,32,123,13,10,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,69,95,78,79,69,88,80,79,82,84,82,85,78,84,73,77,69,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,59,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,103,101,116,83,116,114,105,110,103,73,109,112,108,40,98,117,102,102,101,114,44,32,112,116,114,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,108,101,110,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,98,117,102,102,101,114,41,91,112,116,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,73,90,69,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,62,62,62,32,49,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,97,114,114,32,61,32,110,101,119,32,85,105,110,116,49,54,65,114,114,97,121,40,98,117,102,102,101,114,44,32,112,116,114,44,32,108,101,110,41,59,13,10,32,32,32,32,32,32,32,32,105,102,32,40,108,101,110,32,60,61,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,82,73,78,71,95,68,69,67,79,68,69,95,84,72,82,69,83,72,79,76,68,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,101,40,46,46,46,97,114,114,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,100,101,99,111,100,101,114,46,100,101,99,111,100,101,40,97,114,114,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,112,114,101,73,110,115,116,97,110,116,105,97,116,101,40,105,109,112,111,114,116,115,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,32,61,32,123,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,83,116,114,105,110,103,32,61,32,40,109,101,109,111,114,121,44,32,112,116,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,109,101,109,111,114,121,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,39,60,121,101,116,32,117,110,107,110,111,119,110,62,39,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,103,101,116,83,116,114,105,110,103,73,109,112,108,40,109,101,109,111,114,121,46,98,117,102,102,101,114,44,32,112,116,114,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,110,118,32,61,32,40,105,109,112,111,114,116,115,46,101,110,118,32,61,32,105,109,112,111,114,116,115,46,101,110,118,32,124,124,32,123,125,41,59,13,10,32,32,32,32,32,32,32,32,101,110,118,46,97,98,111,114,116,32,61,32,101,110,118,46,97,98,111,114,116,32,124,124,32,102,117,110,99,116,105,111,110,32,97,98,111,114,116,40,109,115,103,44,32,102,105,108,101,44,32,108,105,110,101,44,32,99,111,108,109,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,109,101,109,111,114,121,32,61,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,109,101,109,111,114,121,32,124,124,32,101,110,118,46,109,101,109,111,114,121,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,96,97,98,111,114,116,58,32,36,123,103,101,116,83,116,114,105,110,103,40,109,101,109,111,114,121,44,32,109,115,103,41,125,32,97,116,32,36,123,103,101,116,83,116,114,105,110,103,40,109,101,109,111,114,121,44,32,102,105,108,101,41,125,58,36,123,108,105,110,101,125,58,36,123,99,111,108,109,125,96,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,101,110,118,46,116,114,97,99,101,32,61,32,101,110,118,46,116,114,97,99,101,32,124,124,32,102,117,110,99,116,105,111,110,32,116,114,97,99,101,40,109,115,103,44,32,110,44,32,46,46,46,97,114,103,115,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,109,101,109,111,114,121,32,61,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,109,101,109,111,114,121,32,124,124,32,101,110,118,46,109,101,109,111,114,121,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,111,108,101,46,108,111,103,40,96,116,114,97,99,101,58,32,36,123,103,101,116,83,116,114,105,110,103,40,109,101,109,111,114,121,44,32,109,115,103,41,125,36,123,110,32,63,32,39,32,39,32,58,32,39,39,125,36,123,97,114,103,115,46,115,108,105,99,101,40,48,44,32,110,41,46,106,111,105,110,40,39,44,32,39,41,125,96,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,101,110,118,46,115,101,101,100,32,61,32,101,110,118,46,115,101,101,100,32,124,124,32,68,97,116,101,46,110,111,119,59,13,10,32,32,32,32,32,32,32,32,105,109,112,111,114,116,115,46,77,97,116,104,32,61,32,105,109,112,111,114,116,115,46,77,97,116,104,32,124,124,32,77,97,116,104,59,13,10,32,32,32,32,32,32,32,32,105,109,112,111,114,116,115,46,68,97,116,101,32,61,32,105,109,112,111,114,116,115,46,68,97,116,101,32,124,124,32,68,97,116,101,59,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,59,13,10,32,32,32,32,125,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,112,111,115,116,73,110,115,116,97,110,116,105,97,116,101,40,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,44,32,105,110,115,116,97,110,99,101,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,112,111,114,116,115,32,61,32,105,110,115,116,97,110,99,101,46,101,120,112,111,114,116,115,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,109,101,109,111,114,121,32,61,32,101,120,112,111,114,116,115,46,109,101,109,111,114,121,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,116,97,98,108,101,32,61,32,101,120,112,111,114,116,115,46,116,97,98,108,101,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,110,101,119,32,61,32,40,101,120,112,111,114,116,115,46,95,95,110,101,119,32,124,124,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,101,114,114,95,110,111,82,117,110,116,105,109,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,99,111,108,108,101,99,116,32,61,32,40,101,120,112,111,114,116,115,46,95,95,99,111,108,108,101,99,116,32,124,124,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,101,114,114,95,110,111,82,117,110,116,105,109,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,112,105,110,32,61,32,40,101,120,112,111,114,116,115,46,95,95,112,105,110,32,124,124,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,101,114,114,95,110,111,82,117,110,116,105,109,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,117,110,112,105,110,32,61,32,40,101,120,112,111,114,116,115,46,95,95,117,110,112,105,110,32,124,124,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,101,114,114,95,110,111,82,117,110,116,105,109,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,114,116,116,105,95,98,97,115,101,32,61,32,40,101,120,112,111,114,116,115,46,95,95,114,116,116,105,95,98,97,115,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,82,116,116,105,67,111,117,110,116,32,61,32,95,95,114,116,116,105,95,98,97,115,101,32,63,13,10,32,32,32,32,32,32,32,32,32,32,32,32,102,117,110,99,116,105,111,110,32,40,97,114,114,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,97,114,114,91,95,95,114,116,116,105,95,98,97,115,101,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,32,58,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,101,114,114,95,110,111,82,117,110,116,105,109,101,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,73,110,102,111,32,61,32,40,105,100,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,51,50,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,109,101,109,111,114,121,46,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,99,111,117,110,116,32,61,32,103,101,116,82,116,116,105,67,111,117,110,116,40,85,51,50,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,40,105,100,32,62,62,62,61,32,48,41,32,62,61,32,99,111,117,110,116,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,96,105,110,118,97,108,105,100,32,105,100,58,32,36,123,105,100,125,96,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,85,51,50,91,40,95,95,114,116,116,105,95,98,97,115,101,32,43,32,52,32,62,62,62,32,50,41,32,43,32,105,100,32,42,32,50,93,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,65,114,114,97,121,73,110,102,111,32,61,32,40,105,100,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,102,111,32,61,32,103,101,116,73,110,102,111,40,105,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,40,105,110,102,111,32,38,32,40,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,32,124,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,32,124,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,65,84,73,67,65,82,82,65,89,41,41,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,96,110,111,116,32,97,110,32,97,114,114,97,121,58,32,36,123,105,100,125,44,32,102,108,97,103,115,61,36,123,105,110,102,111,125,96,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,105,110,102,111,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,66,97,115,101,32,61,32,40,105,100,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,51,50,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,109,101,109,111,114,121,46,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,99,111,117,110,116,32,61,32,103,101,116,82,116,116,105,67,111,117,110,116,40,85,51,50,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,40,105,100,32,62,62,62,61,32,48,41,32,62,61,32,99,111,117,110,116,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,96,105,110,118,97,108,105,100,32,105,100,58,32,36,123,105,100,125,96,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,85,51,50,91,40,95,95,114,116,116,105,95,98,97,115,101,32,43,32,52,32,62,62,62,32,50,41,32,43,32,105,100,32,42,32,50,32,43,32,49,93,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,86,97,108,117,101,65,108,105,103,110,32,61,32,40,105,110,102,111,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,51,49,32,45,32,77,97,116,104,46,99,108,122,51,50,40,40,105,110,102,111,32,62,62,62,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,65,76,73,71,78,95,79,70,70,83,69,84,41,32,38,32,51,49,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,86,105,101,119,32,61,32,40,97,108,105,103,110,76,111,103,50,44,32,115,105,103,110,101,100,44,32,102,108,111,97,116,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,117,102,102,101,114,32,61,32,109,101,109,111,114,121,46,98,117,102,102,101,114,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,102,108,111,97,116,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,119,105,116,99,104,32,40,97,108,105,103,110,76,111,103,50,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,50,58,32,114,101,116,117,114,110,32,110,101,119,32,70,108,111,97,116,51,50,65,114,114,97,121,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,51,58,32,114,101,116,117,114,110,32,110,101,119,32,70,108,111,97,116,54,52,65,114,114,97,121,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,119,105,116,99,104,32,40,97,108,105,103,110,76,111,103,50,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,48,58,32,114,101,116,117,114,110,32,110,101,119,32,40,115,105,103,110,101,100,32,63,32,73,110,116,56,65,114,114,97,121,32,58,32,85,105,110,116,56,65,114,114,97,121,41,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,49,58,32,114,101,116,117,114,110,32,110,101,119,32,40,115,105,103,110,101,100,32,63,32,73,110,116,49,54,65,114,114,97,121,32,58,32,85,105,110,116,49,54,65,114,114,97,121,41,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,50,58,32,114,101,116,117,114,110,32,110,101,119,32,40,115,105,103,110,101,100,32,63,32,73,110,116,51,50,65,114,114,97,121,32,58,32,85,105,110,116,51,50,65,114,114,97,121,41,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,115,101,32,51,58,32,114,101,116,117,114,110,32,110,101,119,32,40,115,105,103,110,101,100,32,63,32,66,105,103,73,110,116,54,52,65,114,114,97,121,32,58,32,66,105,103,85,105,110,116,54,52,65,114,114,97,121,41,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,96,117,110,115,117,112,112,111,114,116,101,100,32,97,108,105,103,110,58,32,36,123,97,108,105,103,110,76,111,103,50,125,96,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,84,121,112,101,100,65,114,114,97,121,32,61,32,40,84,121,112,101,44,32,97,108,105,103,110,76,111,103,50,44,32,112,116,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,101,119,32,84,121,112,101,40,103,101,116,84,121,112,101,100,65,114,114,97,121,86,105,101,119,40,84,121,112,101,44,32,97,108,105,103,110,76,111,103,50,44,32,112,116,114,41,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,84,121,112,101,100,65,114,114,97,121,86,105,101,119,32,61,32,40,84,121,112,101,44,32,97,108,105,103,110,76,111,103,50,44,32,112,116,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,117,102,102,101,114,32,61,32,109,101,109,111,114,121,46,98,117,102,102,101,114,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,51,50,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,117,102,80,116,114,32,61,32,85,51,50,91,112,116,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,68,65,84,65,83,84,65,82,84,95,79,70,70,83,69,84,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,101,119,32,84,121,112,101,40,98,117,102,102,101,114,44,32,98,117,102,80,116,114,44,32,85,51,50,91,98,117,102,80,116,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,73,90,69,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,62,62,62,32,97,108,105,103,110,76,111,103,50,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,97,116,116,97,99,104,84,121,112,101,100,65,114,114,97,121,70,117,110,99,116,105,111,110,115,32,61,32,40,99,116,111,114,44,32,110,97,109,101,44,32,97,108,105,103,110,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,91,96,95,95,103,101,116,36,123,110,97,109,101,125,96,93,32,61,32,103,101,116,84,121,112,101,100,65,114,114,97,121,46,98,105,110,100,40,110,117,108,108,44,32,99,116,111,114,44,32,97,108,105,103,110,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,91,96,95,95,103,101,116,36,123,110,97,109,101,125,86,105,101,119,96,93,32,61,32,103,101,116,84,121,112,101,100,65,114,114,97,121,86,105,101,119,46,98,105,110,100,40,110,117,108,108,44,32,99,116,111,114,44,32,97,108,105,103,110,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,110,101,119,83,116,114,105,110,103,32,61,32,40,115,116,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,115,116,114,32,61,61,32,110,117,108,108,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,48,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,108,101,110,103,116,104,32,61,32,115,116,114,46,108,101,110,103,116,104,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,112,116,114,32,61,32,95,95,110,101,119,40,108,101,110,103,116,104,32,60,60,32,49,44,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,82,73,78,71,95,73,68,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,49,54,32,61,32,110,101,119,32,85,105,110,116,49,54,65,114,114,97,121,40,109,101,109,111,114,121,46,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,40,108,101,116,32,105,32,61,32,48,44,32,112,32,61,32,112,116,114,32,62,62,62,32,49,59,32,105,32,60,32,108,101,110,103,116,104,59,32,43,43,105,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,49,54,91,112,32,43,32,105,93,32,61,32,115,116,114,46,99,104,97,114,67,111,100,101,65,116,40,105,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,112,116,114,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,103,101,116,83,116,114,105,110,103,32,61,32,40,112,116,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,112,116,114,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,110,117,108,108,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,117,102,102,101,114,32,61,32,109,101,109,111,114,121,46,98,117,102,102,101,114,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,100,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,98,117,102,102,101,114,41,91,112,116,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,73,68,95,79,70,70,83,69,84,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,105,100,32,33,61,61,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,82,73,78,71,95,73,68,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,104,114,111,119,32,69,114,114,111,114,40,96,110,111,116,32,97,32,115,116,114,105,110,103,58,32,36,123,112,116,114,125,96,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,103,101,116,83,116,114,105,110,103,73,109,112,108,40,98,117,102,102,101,114,44,32,112,116,114,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,110,101,119,65,114,114,97,121,32,61,32,40,105,100,44,32,118,97,108,117,101,115,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,102,111,32,61,32,103,101,116,65,114,114,97,121,73,110,102,111,40,105,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,97,108,105,103,110,32,61,32,103,101,116,86,97,108,117,101,65,108,105,103,110,40,105,110,102,111,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,108,101,110,103,116,104,32,61,32,118,97,108,117,101,115,46,108,101,110,103,116,104,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,117,102,32,61,32,95,95,110,101,119,40,108,101,110,103,116,104,32,60,60,32,97,108,105,103,110,44,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,65,84,73,67,65,82,82,65,89,32,63,32,105,100,32,58,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,95,73,68,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,108,101,116,32,114,101,115,117,108,116,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,65,84,73,67,65,82,82,65,89,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,115,117,108,116,32,61,32,98,117,102,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,112,105,110,40,98,117,102,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,97,114,114,32,61,32,95,95,110,101,119,40,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,32,63,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,95,83,73,90,69,32,58,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,83,73,90,69,44,32,105,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,95,117,110,112,105,110,40,98,117,102,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,51,50,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,109,101,109,111,114,121,46,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,66,85,70,70,69,82,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,61,32,98,117,102,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,68,65,84,65,83,84,65,82,84,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,61,32,98,117,102,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,68,65,84,65,76,69,78,71,84,72,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,61,32,108,101,110,103,116,104,32,60,60,32,97,108,105,103,110,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,95,76,69,78,71,84,72,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,61,32,108,101,110,103,116,104,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,115,117,108,116,32,61,32,97,114,114,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,118,105,101,119,32,61,32,103,101,116,86,105,101,119,40,97,108,105,103,110,44,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,83,73,71,78,69,68,44,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,70,76,79,65,84,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,77,65,78,65,71,69,68,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,40,108,101,116,32,105,32,61,32,48,59,32,105,32,60,32,108,101,110,103,116,104,59,32,43,43,105,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,118,97,108,117,101,32,61,32,118,97,108,117,101,115,91,105,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,105,101,119,91,40,98,117,102,32,62,62,62,32,97,108,105,103,110,41,32,43,32,105,93,32,61,32,118,97,108,117,101,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,118,105,101,119,46,115,101,116,40,118,97,108,117,101,115,44,32,98,117,102,32,62,62,62,32,97,108,105,103,110,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,114,101,115,117,108,116,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,103,101,116,65,114,114,97,121,86,105,101,119,32,61,32,40,97,114,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,51,50,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,109,101,109,111,114,121,46,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,100,32,61,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,73,68,95,79,70,70,83,69,84,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,102,111,32,61,32,103,101,116,65,114,114,97,121,73,110,102,111,40,105,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,97,108,105,103,110,32,61,32,103,101,116,86,97,108,117,101,65,108,105,103,110,40,105,110,102,111,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,108,101,116,32,98,117,102,32,61,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,84,65,84,73,67,65,82,82,65,89,32,63,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,114,114,32,58,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,66,85,70,70,69,82,86,73,69,87,95,68,65,84,65,83,84,65,82,84,95,79,70,70,83,69,84,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,108,101,110,103,116,104,32,61,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,32,63,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,97,114,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,65,82,82,65,89,95,76,69,78,71,84,72,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,58,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,51,50,91,98,117,102,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,73,90,69,95,79,70,70,83,69,84,32,62,62,62,32,50,93,32,62,62,62,32,97,108,105,103,110,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,103,101,116,86,105,101,119,40,97,108,105,103,110,44,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,83,73,71,78,69,68,44,32,105,110,102,111,32,38,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,86,65,76,95,70,76,79,65,84,41,46,115,117,98,97,114,114,97,121,40,98,117,102,32,62,62,62,61,32,97,108,105,103,110,44,32,98,117,102,32,43,32,108,101,110,103,116,104,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,103,101,116,65,114,114,97,121,32,61,32,40,97,114,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,112,117,116,32,61,32,95,95,103,101,116,65,114,114,97,121,86,105,101,119,40,97,114,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,108,101,110,32,61,32,105,110,112,117,116,46,108,101,110,103,116,104,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,111,117,116,32,61,32,110,101,119,32,65,114,114,97,121,40,108,101,110,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,102,111,114,32,40,108,101,116,32,105,32,61,32,48,59,32,105,32,60,32,108,101,110,59,32,105,43,43,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,91,105,93,32,61,32,105,110,112,117,116,91,105,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,111,117,116,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,103,101,116,65,114,114,97,121,66,117,102,102,101,114,32,61,32,40,112,116,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,117,102,102,101,114,32,61,32,109,101,109,111,114,121,46,98,117,102,102,101,114,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,108,101,110,103,116,104,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,98,117,102,102,101,114,41,91,112,116,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,83,73,90,69,95,79,70,70,83,69,84,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,98,117,102,102,101,114,46,115,108,105,99,101,40,112,116,114,44,32,112,116,114,32,43,32,108,101,110,103,116,104,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,95,95,105,110,115,116,97,110,99,101,111,102,32,61,32,40,112,116,114,44,32,98,97,115,101,73,100,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,85,51,50,32,61,32,110,101,119,32,85,105,110,116,51,50,65,114,114,97,121,40,109,101,109,111,114,121,46,98,117,102,102,101,114,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,108,101,116,32,105,100,32,61,32,85,51,50,91,112,116,114,32,43,32,116,104,105,115,46,95,105,110,116,101,114,110,97,108,95,73,68,95,79,70,70,83,69,84,32,62,62,62,32,50,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,105,100,32,60,61,32,103,101,116,82,116,116,105,67,111,117,110,116,40,85,51,50,41,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,100,111,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,105,100,32,61,61,32,98,97,115,101,73,100,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,114,117,101,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,100,32,61,32,103,101,116,66,97,115,101,40,105,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,32,119,104,105,108,101,32,40,105,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,102,97,108,115,101,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,110,101,119,32,61,32,95,95,110,101,119,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,112,105,110,32,61,32,95,95,112,105,110,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,117,110,112,105,110,32,61,32,95,95,117,110,112,105,110,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,99,111,108,108,101,99,116,32,61,32,95,95,99,111,108,108,101,99,116,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,110,101,119,83,116,114,105,110,103,32,61,32,95,95,110,101,119,83,116,114,105,110,103,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,103,101,116,83,116,114,105,110,103,32,61,32,95,95,103,101,116,83,116,114,105,110,103,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,110,101,119,65,114,114,97,121,32,61,32,95,95,110,101,119,65,114,114,97,121,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,103,101,116,65,114,114,97,121,86,105,101,119,32,61,32,95,95,103,101,116,65,114,114,97,121,86,105,101,119,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,103,101,116,65,114,114,97,121,32,61,32,95,95,103,101,116,65,114,114,97,121,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,103,101,116,65,114,114,97,121,66,117,102,102,101,114,32,61,32,95,95,103,101,116,65,114,114,97,121,66,117,102,102,101,114,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,95,95,105,110,115,116,97,110,99,101,111,102,32,61,32,95,95,105,110,115,116,97,110,99,101,111,102,59,13,10,32,32,32,32,32,32,32,32,91,13,10,32,32,32,32,32,32,32,32,32,32,32,32,73,110,116,56,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,85,105,110,116,56,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,85,105,110,116,56,67,108,97,109,112,101,100,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,73,110,116,49,54,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,85,105,110,116,49,54,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,73,110,116,51,50,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,85,105,110,116,51,50,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,70,108,111,97,116,51,50,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,70,108,111,97,116,54,52,65,114,114,97,121,44,13,10,32,32,32,32,32,32,32,32,93,46,102,111,114,69,97,99,104,40,40,99,116,111,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,97,116,116,97,99,104,84,121,112,101,100,65,114,114,97,121,70,117,110,99,116,105,111,110,115,40,99,116,111,114,44,32,99,116,111,114,46,110,97,109,101,44,32,51,49,32,45,32,77,97,116,104,46,99,108,122,51,50,40,99,116,111,114,46,66,89,84,69,83,95,80,69,82,95,69,76,69,77,69,78,84,41,41,59,13,10,32,32,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,32,32,32,32,105,102,32,40,116,121,112,101,111,102,32,66,105,103,85,105,110,116,54,52,65,114,114,97,121,32,33,61,61,32,39,117,110,100,101,102,105,110,101,100,39,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,91,66,105,103,85,105,110,116,54,52,65,114,114,97,121,44,32,66,105,103,73,110,116,54,52,65,114,114,97,121,93,46,102,111,114,69,97,99,104,40,40,99,116,111,114,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,116,116,97,99,104,84,121,112,101,100,65,114,114,97,121,70,117,110,99,116,105,111,110,115,40,99,116,111,114,44,32,99,116,111,114,46,110,97,109,101,46,115,108,105,99,101,40,51,41,44,32,51,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,109,101,109,111,114,121,32,61,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,109,101,109,111,114,121,32,124,124,32,109,101,109,111,114,121,59,13,10,32,32,32,32,32,32,32,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,116,97,98,108,101,32,61,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,46,116,97,98,108,101,32,124,124,32,116,97,98,108,101,59,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,100,101,109,97,110,103,108,101,40,101,120,112,111,114,116,115,44,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,105,115,82,101,115,112,111,110,115,101,40,115,114,99,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,121,112,101,111,102,32,82,101,115,112,111,110,115,101,32,33,61,61,32,39,117,110,100,101,102,105,110,101,100,39,32,38,38,32,115,114,99,32,105,110,115,116,97,110,99,101,111,102,32,82,101,115,112,111,110,115,101,59,13,10,32,32,32,32,125,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,105,115,77,111,100,117,108,101,40,115,114,99,41,32,123,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,115,114,99,32,105,110,115,116,97,110,99,101,111,102,32,87,101,98,65,115,115,101,109,98,108,121,46,77,111,100,117,108,101,59,13,10,32,32,32,32,125,13,10,32,32,32,32,95,112,114,105,118,97,116,101,95,100,101,109,97,110,103,108,101,40,101,120,112,111,114,116,115,44,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,32,61,32,123,125,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,32,61,32,101,120,112,111,114,116,115,91,39,95,95,97,114,103,117,109,101,110,116,115,76,101,110,103,116,104,39,93,32,63,13,10,32,32,32,32,32,32,32,32,32,32,32,32,40,108,101,110,103,116,104,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,120,112,111,114,116,115,91,39,95,95,97,114,103,117,109,101,110,116,115,76,101,110,103,116,104,39,93,46,118,97,108,117,101,32,61,32,108,101,110,103,116,104,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,32,58,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,120,112,111,114,116,115,91,39,95,95,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,39,93,32,124,124,32,101,120,112,111,114,116,115,91,39,95,95,115,101,116,97,114,103,99,39,93,32,124,124,32,40,40,41,32,61,62,32,123,32,125,41,59,13,10,32,32,32,32,32,32,32,32,102,111,114,32,40,99,111,110,115,116,32,105,110,116,101,114,110,97,108,78,97,109,101,32,105,110,32,101,120,112,111,114,116,115,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,79,98,106,101,99,116,46,112,114,111,116,111,116,121,112,101,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,46,99,97,108,108,40,101,120,112,111,114,116,115,44,32,105,110,116,101,114,110,97,108,78,97,109,101,41,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,116,105,110,117,101,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,108,101,109,32,61,32,101,120,112,111,114,116,115,91,105,110,116,101,114,110,97,108,78,97,109,101,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,112,97,114,116,115,32,61,32,105,110,116,101,114,110,97,108,78,97,109,101,46,115,112,108,105,116,40,39,46,39,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,108,101,116,32,99,117,114,114,32,61,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,119,104,105,108,101,32,40,112,97,114,116,115,46,108,101,110,103,116,104,32,62,32,49,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,112,97,114,116,32,61,32,112,97,114,116,115,46,115,104,105,102,116,40,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,79,98,106,101,99,116,46,112,114,111,116,111,116,121,112,101,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,46,99,97,108,108,40,99,117,114,114,44,32,112,97,114,116,41,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,91,112,97,114,116,93,32,61,32,123,125,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,32,61,32,99,117,114,114,91,112,97,114,116,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,108,101,116,32,110,97,109,101,32,61,32,112,97,114,116,115,91,48,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,104,97,115,104,32,61,32,110,97,109,101,46,105,110,100,101,120,79,102,40,39,35,39,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,104,97,115,104,32,62,61,32,48,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,99,108,97,115,115,78,97,109,101,32,61,32,110,97,109,101,46,115,117,98,115,116,114,105,110,103,40,48,44,32,104,97,115,104,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,99,108,97,115,115,69,108,101,109,32,61,32,99,117,114,114,91,99,108,97,115,115,78,97,109,101,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,116,121,112,101,111,102,32,99,108,97,115,115,69,108,101,109,32,61,61,61,32,39,117,110,100,101,102,105,110,101,100,39,32,124,124,32,33,99,108,97,115,115,69,108,101,109,46,112,114,111,116,111,116,121,112,101,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,99,116,111,114,32,61,32,102,117,110,99,116,105,111,110,32,40,46,46,46,97,114,103,115,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,99,116,111,114,46,95,105,110,116,101,114,110,97,108,95,119,114,97,112,40,99,116,111,114,46,112,114,111,116,111,116,121,112,101,46,99,111,110,115,116,114,117,99,116,111,114,40,48,44,32,46,46,46,97,114,103,115,41,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,116,111,114,46,112,114,111,116,111,116,121,112,101,32,61,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,105,110,116,101,114,110,97,108,95,118,97,108,117,101,79,102,40,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,91,116,104,105,115,46,95,84,72,73,83,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,116,111,114,46,95,105,110,116,101,114,110,97,108,95,119,114,97,112,32,61,32,102,117,110,99,116,105,111,110,32,40,116,104,105,115,86,97,108,117,101,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,79,98,106,101,99,116,46,99,114,101,97,116,101,40,99,116,111,114,46,112,114,111,116,111,116,121,112,101,44,32,123,32,91,116,104,105,115,46,95,84,72,73,83,93,58,32,123,32,118,97,108,117,101,58,32,116,104,105,115,86,97,108,117,101,44,32,119,114,105,116,97,98,108,101,58,32,102,97,108,115,101,32,125,32,125,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,99,108,97,115,115,69,108,101,109,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,98,106,101,99,116,46,103,101,116,79,119,110,80,114,111,112,101,114,116,121,78,97,109,101,115,40,99,108,97,115,115,69,108,101,109,41,46,102,111,114,69,97,99,104,40,40,110,97,109,101,41,32,61,62,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,99,116,111,114,44,32,110,97,109,101,44,32,79,98,106,101,99,116,46,103,101,116,79,119,110,80,114,111,112,101,114,116,121,68,101,115,99,114,105,112,116,111,114,40,99,108,97,115,115,69,108,101,109,44,32,110,97,109,101,41,41,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,91,99,108,97,115,115,78,97,109,101,93,32,61,32,99,116,111,114,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,97,109,101,32,61,32,110,97,109,101,46,115,117,98,115,116,114,105,110,103,40,104,97,115,104,32,43,32,49,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,32,61,32,99,117,114,114,91,99,108,97,115,115,78,97,109,101,93,46,112,114,111,116,111,116,121,112,101,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,47,94,40,103,101,116,124,115,101,116,41,58,47,46,116,101,115,116,40,110,97,109,101,41,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,79,98,106,101,99,116,46,112,114,111,116,111,116,121,112,101,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,46,99,97,108,108,40,99,117,114,114,44,32,110,97,109,101,32,61,32,110,97,109,101,46,115,117,98,115,116,114,105,110,103,40,52,41,41,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,103,101,116,116,101,114,32,61,32,101,120,112,111,114,116,115,91,105,110,116,101,114,110,97,108,78,97,109,101,46,114,101,112,108,97,99,101,40,39,115,101,116,58,39,44,32,39,103,101,116,58,39,41,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,115,101,116,116,101,114,32,61,32,101,120,112,111,114,116,115,91,105,110,116,101,114,110,97,108,78,97,109,101,46,114,101,112,108,97,99,101,40,39,103,101,116,58,39,44,32,39,115,101,116,58,39,41,93,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,99,117,114,114,44,32,110,97,109,101,44,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,105,110,116,101,114,110,97,108,95,103,101,116,40,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,103,101,116,116,101,114,40,116,104,105,115,91,116,104,105,115,46,95,84,72,73,83,93,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,95,105,110,116,101,114,110,97,108,95,115,101,116,40,118,97,108,117,101,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,116,116,101,114,40,116,104,105,115,91,116,104,105,115,46,95,84,72,73,83,93,44,32,118,97,108,117,101,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,117,109,101,114,97,98,108,101,58,32,116,114,117,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,110,97,109,101,32,61,61,61,32,39,99,111,110,115,116,114,117,99,116,111,114,39,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,99,117,114,114,91,110,97,109,101,93,32,61,32,40,46,46,46,97,114,103,115,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,40,97,114,103,115,46,108,101,110,103,116,104,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,108,101,109,40,46,46,46,97,114,103,115,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,46,111,114,105,103,105,110,97,108,32,61,32,101,108,101,109,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,99,117,114,114,91,110,97,109,101,93,32,61,32,102,117,110,99,116,105,111,110,32,40,46,46,46,97,114,103,115,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,40,97,114,103,115,46,108,101,110,103,116,104,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,108,101,109,40,116,104,105,115,91,116,104,105,115,46,95,84,72,73,83,93,44,32,46,46,46,97,114,103,115,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,46,111,114,105,103,105,110,97,108,32,61,32,101,108,101,109,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,47,94,40,103,101,116,124,115,101,116,41,58,47,46,116,101,115,116,40,110,97,109,101,41,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,33,79,98,106,101,99,116,46,112,114,111,116,111,116,121,112,101,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,46,99,97,108,108,40,99,117,114,114,44,32,110,97,109,101,32,61,32,110,97,109,101,46,115,117,98,115,116,114,105,110,103,40,52,41,41,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,98,106,101,99,116,46,100,101,102,105,110,101,80,114,111,112,101,114,116,121,40,99,117,114,114,44,32,110,97,109,101,44,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,103,101,116,58,32,101,120,112,111,114,116,115,91,105,110,116,101,114,110,97,108,78,97,109,101,46,114,101,112,108,97,99,101,40,39,115,101,116,58,39,44,32,39,103,101,116,58,39,41,93,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,116,58,32,101,120,112,111,114,116,115,91,105,110,116,101,114,110,97,108,78,97,109,101,46,114,101,112,108,97,99,101,40,39,103,101,116,58,39,44,32,39,115,101,116,58,39,41,93,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,110,117,109,101,114,97,98,108,101,58,32,116,114,117,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,105,102,32,40,116,121,112,101,111,102,32,101,108,101,109,32,61,61,61,32,39,102,117,110,99,116,105,111,110,39,32,38,38,32,101,108,101,109,32,33,61,61,32,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,40,99,117,114,114,91,110,97,109,101,93,32,61,32,40,46,46,46,97,114,103,115,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,101,116,65,114,103,117,109,101,110,116,115,76,101,110,103,116,104,40,97,114,103,115,46,108,101,110,103,116,104,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,108,101,109,40,46,46,46,97,114,103,115,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,41,46,111,114,105,103,105,110,97,108,32,61,32,101,108,101,109,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,108,115,101,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,117,114,114,91,110,97,109,101,93,32,61,32,101,108,101,109,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,101,120,116,101,110,100,101,100,69,120,112,111,114,116,115,59,13,10,32,32,32,32,125,13,10,32,32,32,32,97,115,121,110,99,32,105,110,115,116,97,110,116,105,97,116,101,40,115,111,117,114,99,101,44,32,105,109,112,111,114,116,115,32,61,32,123,125,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,116,104,105,115,46,95,112,114,105,118,97,116,101,95,105,115,82,101,115,112,111,110,115,101,40,115,111,117,114,99,101,32,61,32,97,119,97,105,116,32,115,111,117,114,99,101,41,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,105,110,115,116,97,110,116,105,97,116,101,83,116,114,101,97,109,105,110,103,40,115,111,117,114,99,101,44,32,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,109,111,100,117,108,101,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,105,115,77,111,100,117,108,101,40,115,111,117,114,99,101,41,32,63,32,115,111,117,114,99,101,32,58,32,97,119,97,105,116,32,87,101,98,65,115,115,101,109,98,108,121,46,99,111,109,112,105,108,101,40,115,111,117,114,99,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,116,101,110,100,101,100,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,112,114,101,73,110,115,116,97,110,116,105,97,116,101,40,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,115,116,97,110,99,101,32,61,32,97,119,97,105,116,32,87,101,98,65,115,115,101,109,98,108,121,46,105,110,115,116,97,110,116,105,97,116,101,40,109,111,100,117,108,101,44,32,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,112,111,114,116,115,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,112,111,115,116,73,110,115,116,97,110,116,105,97,116,101,40,101,120,116,101,110,100,101,100,44,32,105,110,115,116,97,110,99,101,41,59,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,123,32,109,111,100,117,108,101,44,32,105,110,115,116,97,110,99,101,44,32,101,120,112,111,114,116,115,32,125,59,13,10,32,32,32,32,125,13,10,32,32,32,32,105,110,115,116,97,110,116,105,97,116,101,83,121,110,99,40,115,111,117,114,99,101,44,32,105,109,112,111,114,116,115,32,61,32,123,125,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,109,111,100,117,108,101,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,105,115,77,111,100,117,108,101,40,115,111,117,114,99,101,41,32,63,32,115,111,117,114,99,101,32,58,32,110,101,119,32,87,101,98,65,115,115,101,109,98,108,121,46,77,111,100,117,108,101,40,115,111,117,114,99,101,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,116,101,110,100,101,100,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,112,114,101,73,110,115,116,97,110,116,105,97,116,101,40,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,115,116,97,110,99,101,32,61,32,110,101,119,32,87,101,98,65,115,115,101,109,98,108,121,46,73,110,115,116,97,110,99,101,40,109,111,100,117,108,101,44,32,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,112,111,114,116,115,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,112,111,115,116,73,110,115,116,97,110,116,105,97,116,101,40,101,120,116,101,110,100,101,100,44,32,105,110,115,116,97,110,99,101,41,59,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,123,32,109,111,100,117,108,101,44,32,105,110,115,116,97,110,99,101,44,32,101,120,112,111,114,116,115,32,125,59,13,10,32,32,32,32,125,13,10,32,32,32,32,97,115,121,110,99,32,105,110,115,116,97,110,116,105,97,116,101,83,116,114,101,97,109,105,110,103,40,115,111,117,114,99,101,44,32,105,109,112,111,114,116,115,32,61,32,123,125,41,32,123,13,10,32,32,32,32,32,32,32,32,105,102,32,40,33,87,101,98,65,115,115,101,109,98,108,121,46,105,110,115,116,97,110,116,105,97,116,101,83,116,114,101,97,109,105,110,103,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,116,104,105,115,46,105,110,115,116,97,110,116,105,97,116,101,40,116,104,105,115,46,95,112,114,105,118,97,116,101,95,105,115,82,101,115,112,111,110,115,101,40,115,111,117,114,99,101,32,61,32,97,119,97,105,116,32,115,111,117,114,99,101,41,32,63,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,111,117,114,99,101,46,97,114,114,97,121,66,117,102,102,101,114,40,41,32,58,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,111,117,114,99,101,44,32,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,116,101,110,100,101,100,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,112,114,101,73,110,115,116,97,110,116,105,97,116,101,40,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,114,101,115,117,108,116,32,61,32,97,119,97,105,116,32,87,101,98,65,115,115,101,109,98,108,121,46,105,110,115,116,97,110,116,105,97,116,101,83,116,114,101,97,109,105,110,103,40,115,111,117,114,99,101,44,32,105,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,101,120,112,111,114,116,115,32,61,32,116,104,105,115,46,95,112,114,105,118,97,116,101,95,112,111,115,116,73,110,115,116,97,110,116,105,97,116,101,40,101,120,116,101,110,100,101,100,44,32,114,101,115,117,108,116,46,105,110,115,116,97,110,99,101,41,59,13,10,32,32,32,32,32,32,32,32,114,101,116,117,114,110,32,123,32,46,46,46,114,101,115,117,108,116,44,32,101,120,112,111,114,116,115,32,125,59,13,10,32,32,32,32,125,13,10,125,13,10]}},"_replacements":[{"start":0,"end":6,"content":"","insertIndex":0}],"_isSorted":true},"_cachedSource":"class WascLoader {\r\n    constructor() {\r\n        this._internal_ID_OFFSET = -8;\r\n        this._internal_SIZE_OFFSET = -4;\r\n        this._internal_ARRAYBUFFER_ID = 0;\r\n        this._internal_STRING_ID = 1;\r\n        this._internal_ARRAYBUFFERVIEW = 1 << 0;\r\n        this._internal_ARRAY = 1 << 1;\r\n        this._internal_STATICARRAY = 1 << 2;\r\n        this._internal_VAL_ALIGN_OFFSET = 6;\r\n        this._internal_VAL_SIGNED = 1 << 11;\r\n        this._internal_VAL_FLOAT = 1 << 12;\r\n        this._internal_VAL_MANAGED = 1 << 14;\r\n        this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\r\n        this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\r\n        this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\r\n        this._internal_ARRAYBUFFERVIEW_SIZE = 12;\r\n        this._internal_ARRAY_LENGTH_OFFSET = 12;\r\n        this._internal_ARRAY_SIZE = 16;\r\n        this._internal__THIS = Symbol();\r\n        this._internal_STRING_DECODE_THRESHOLD = 32;\r\n        this._internal_decoder = new TextDecoder('utf-16le');\r\n        this._internal_E_NOEXPORTRUNTIME = 'Operation requires compiling with --exportRuntime';\r\n    }\r\n    _private_err_noRuntime() {\r\n        throw Error(this._internal_E_NOEXPORTRUNTIME);\r\n    }\r\n    ;\r\n    _private_getStringImpl(buffer, ptr) {\r\n        const len = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2] >>> 1;\r\n        const arr = new Uint16Array(buffer, ptr, len);\r\n        if (len <= this._internal_STRING_DECODE_THRESHOLD) {\r\n            return String.fromCharCode(...arr);\r\n        }\r\n        return this._internal_decoder.decode(arr);\r\n    }\r\n    _private_preInstantiate(imports) {\r\n        const extendedExports = {};\r\n        const getString = (memory, ptr) => {\r\n            if (!memory)\r\n                return '<yet unknown>';\r\n            return this._private_getStringImpl(memory.buffer, ptr);\r\n        };\r\n        const env = (imports.env = imports.env || {});\r\n        env.abort = env.abort || function abort(msg, file, line, colm) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\r\n        };\r\n        env.trace = env.trace || function trace(msg, n, ...args) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            console.log(`trace: ${getString(memory, msg)}${n ? ' ' : ''}${args.slice(0, n).join(', ')}`);\r\n        };\r\n        env.seed = env.seed || Date.now;\r\n        imports.Math = imports.Math || Math;\r\n        imports.Date = imports.Date || Date;\r\n        return extendedExports;\r\n    }\r\n    _private_postInstantiate(extendedExports, instance) {\r\n        const exports = instance.exports;\r\n        const memory = exports.memory;\r\n        const table = exports.table;\r\n        const __new = (exports.__new || this._private_err_noRuntime);\r\n        const __collect = (exports.__collect || this._private_err_noRuntime);\r\n        const __pin = (exports.__pin || this._private_err_noRuntime);\r\n        const __unpin = (exports.__unpin || this._private_err_noRuntime);\r\n        const __rtti_base = (exports.__rtti_base);\r\n        const getRttiCount = __rtti_base ?\r\n            function (arr) {\r\n                return arr[__rtti_base >>> 2];\r\n            } :\r\n            this._private_err_noRuntime;\r\n        const getInfo = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2];\r\n        };\r\n        const getArrayInfo = (id) => {\r\n            const info = getInfo(id);\r\n            if (!(info & (this._internal_ARRAYBUFFERVIEW | this._internal_ARRAY | this._internal_STATICARRAY)))\r\n                throw Error(`not an array: ${id}, flags=${info}`);\r\n            return info;\r\n        };\r\n        const getBase = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];\r\n        };\r\n        const getValueAlign = (info) => {\r\n            return 31 - Math.clz32((info >>> this._internal_VAL_ALIGN_OFFSET) & 31);\r\n        };\r\n        const getView = (alignLog2, signed, float) => {\r\n            const buffer = memory.buffer;\r\n            if (float) {\r\n                switch (alignLog2) {\r\n                    case 2: return new Float32Array(buffer);\r\n                    case 3: return new Float64Array(buffer);\r\n                }\r\n            }\r\n            else {\r\n                switch (alignLog2) {\r\n                    case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\r\n                    case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\r\n                    case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\r\n                    case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\r\n                }\r\n            }\r\n            throw Error(`unsupported align: ${alignLog2}`);\r\n        };\r\n        const getTypedArray = (Type, alignLog2, ptr) => {\r\n            return new Type(getTypedArrayView(Type, alignLog2, ptr));\r\n        };\r\n        const getTypedArrayView = (Type, alignLog2, ptr) => {\r\n            const buffer = memory.buffer;\r\n            const U32 = new Uint32Array(buffer);\r\n            const bufPtr = U32[ptr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            return new Type(buffer, bufPtr, U32[bufPtr + this._internal_SIZE_OFFSET >>> 2] >>> alignLog2);\r\n        };\r\n        const attachTypedArrayFunctions = (ctor, name, align) => {\r\n            extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\r\n            extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\r\n        };\r\n        const __newString = (str) => {\r\n            if (str == null)\r\n                return 0;\r\n            const length = str.length;\r\n            const ptr = __new(length << 1, this._internal_STRING_ID);\r\n            const U16 = new Uint16Array(memory.buffer);\r\n            for (let i = 0, p = ptr >>> 1; i < length; ++i)\r\n                U16[p + i] = str.charCodeAt(i);\r\n            return ptr;\r\n        };\r\n        const __getString = (ptr) => {\r\n            if (!ptr)\r\n                return null;\r\n            const buffer = memory.buffer;\r\n            const id = new Uint32Array(buffer)[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id !== this._internal_STRING_ID)\r\n                throw Error(`not a string: ${ptr}`);\r\n            return this._private_getStringImpl(buffer, ptr);\r\n        };\r\n        const __newArray = (id, values) => {\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            const length = values.length;\r\n            const buf = __new(length << align, info & this._internal_STATICARRAY ? id : this._internal_ARRAYBUFFER_ID);\r\n            let result;\r\n            if (info & this._internal_STATICARRAY) {\r\n                result = buf;\r\n            }\r\n            else {\r\n                __pin(buf);\r\n                const arr = __new(info & this._internal_ARRAY ? this._internal_ARRAY_SIZE : this._internal_ARRAYBUFFERVIEW_SIZE, id);\r\n                __unpin(buf);\r\n                const U32 = new Uint32Array(memory.buffer);\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\r\n                if (info & this._internal_ARRAY)\r\n                    U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] = length;\r\n                result = arr;\r\n            }\r\n            const view = getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT);\r\n            if (info & this._internal_VAL_MANAGED) {\r\n                for (let i = 0; i < length; ++i) {\r\n                    const value = values[i];\r\n                    view[(buf >>> align) + i] = value;\r\n                }\r\n            }\r\n            else {\r\n                view.set(values, buf >>> align);\r\n            }\r\n            return result;\r\n        };\r\n        const __getArrayView = (arr) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const id = U32[arr + this._internal_ID_OFFSET >>> 2];\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            let buf = info & this._internal_STATICARRAY ?\r\n                arr :\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            const length = info & this._internal_ARRAY ?\r\n                U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] :\r\n                U32[buf + this._internal_SIZE_OFFSET >>> 2] >>> align;\r\n            return getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT).subarray(buf >>>= align, buf + length);\r\n        };\r\n        const __getArray = (arr) => {\r\n            const input = __getArrayView(arr);\r\n            const len = input.length;\r\n            const out = new Array(len);\r\n            for (let i = 0; i < len; i++)\r\n                out[i] = input[i];\r\n            return out;\r\n        };\r\n        const __getArrayBuffer = (ptr) => {\r\n            const buffer = memory.buffer;\r\n            const length = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2];\r\n            return buffer.slice(ptr, ptr + length);\r\n        };\r\n        const __instanceof = (ptr, baseId) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            let id = U32[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id <= getRttiCount(U32)) {\r\n                do {\r\n                    if (id == baseId)\r\n                        return true;\r\n                    id = getBase(id);\r\n                } while (id);\r\n            }\r\n            return false;\r\n        };\r\n        extendedExports.__new = __new;\r\n        extendedExports.__pin = __pin;\r\n        extendedExports.__unpin = __unpin;\r\n        extendedExports.__collect = __collect;\r\n        extendedExports.__newString = __newString;\r\n        extendedExports.__getString = __getString;\r\n        extendedExports.__newArray = __newArray;\r\n        extendedExports.__getArrayView = __getArrayView;\r\n        extendedExports.__getArray = __getArray;\r\n        extendedExports.__getArrayBuffer = __getArrayBuffer;\r\n        extendedExports.__instanceof = __instanceof;\r\n        [\r\n            Int8Array,\r\n            Uint8Array,\r\n            Uint8ClampedArray,\r\n            Int16Array,\r\n            Uint16Array,\r\n            Int32Array,\r\n            Uint32Array,\r\n            Float32Array,\r\n            Float64Array,\r\n        ].forEach((ctor) => {\r\n            attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\r\n        });\r\n        if (typeof BigUint64Array !== 'undefined') {\r\n            [BigUint64Array, BigInt64Array].forEach((ctor) => {\r\n                attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\r\n            });\r\n        }\r\n        extendedExports.memory = extendedExports.memory || memory;\r\n        extendedExports.table = extendedExports.table || table;\r\n        return this._private_demangle(exports, extendedExports);\r\n    }\r\n    _private_isResponse(src) {\r\n        return typeof Response !== 'undefined' && src instanceof Response;\r\n    }\r\n    _private_isModule(src) {\r\n        return src instanceof WebAssembly.Module;\r\n    }\r\n    _private_demangle(exports, extendedExports = {}) {\r\n        const setArgumentsLength = exports['__argumentsLength'] ?\r\n            (length) => {\r\n                exports['__argumentsLength'].value = length;\r\n            } :\r\n            exports['__setArgumentsLength'] || exports['__setargc'] || (() => { });\r\n        for (const internalName in exports) {\r\n            if (!Object.prototype.hasOwnProperty.call(exports, internalName))\r\n                continue;\r\n            const elem = exports[internalName];\r\n            const parts = internalName.split('.');\r\n            let curr = extendedExports;\r\n            while (parts.length > 1) {\r\n                const part = parts.shift();\r\n                if (!Object.prototype.hasOwnProperty.call(curr, part))\r\n                    curr[part] = {};\r\n                curr = curr[part];\r\n            }\r\n            let name = parts[0];\r\n            const hash = name.indexOf('#');\r\n            if (hash >= 0) {\r\n                const className = name.substring(0, hash);\r\n                const classElem = curr[className];\r\n                if (typeof classElem === 'undefined' || !classElem.prototype) {\r\n                    const ctor = function (...args) {\r\n                        return ctor._internal_wrap(ctor.prototype.constructor(0, ...args));\r\n                    };\r\n                    ctor.prototype = {\r\n                        _internal_valueOf() {\r\n                            return this[this._THIS];\r\n                        },\r\n                    };\r\n                    ctor._internal_wrap = function (thisValue) {\r\n                        return Object.create(ctor.prototype, { [this._THIS]: { value: thisValue, writable: false } });\r\n                    };\r\n                    if (classElem) {\r\n                        Object.getOwnPropertyNames(classElem).forEach((name) => Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name)));\r\n                    }\r\n                    curr[className] = ctor;\r\n                }\r\n                name = name.substring(hash + 1);\r\n                curr = curr[className].prototype;\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        const getter = exports[internalName.replace('set:', 'get:')];\r\n                        const setter = exports[internalName.replace('get:', 'set:')];\r\n                        Object.defineProperty(curr, name, {\r\n                            _internal_get() {\r\n                                return getter(this[this._THIS]);\r\n                            },\r\n                            _internal_set(value) {\r\n                                setter(this[this._THIS], value);\r\n                            },\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    if (name === 'constructor') {\r\n                        (curr[name] = (...args) => {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(...args);\r\n                        }).original = elem;\r\n                    }\r\n                    else {\r\n                        (curr[name] = function (...args) {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(this[this._THIS], ...args);\r\n                        }).original = elem;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        Object.defineProperty(curr, name, {\r\n                            get: exports[internalName.replace('set:', 'get:')],\r\n                            set: exports[internalName.replace('get:', 'set:')],\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else if (typeof elem === 'function' && elem !== setArgumentsLength) {\r\n                    (curr[name] = (...args) => {\r\n                        setArgumentsLength(args.length);\r\n                        return elem(...args);\r\n                    }).original = elem;\r\n                }\r\n                else {\r\n                    curr[name] = elem;\r\n                }\r\n            }\r\n        }\r\n        return extendedExports;\r\n    }\r\n    async instantiate(source, imports = {}) {\r\n        if (this._private_isResponse(source = await source))\r\n            return this.instantiateStreaming(source, imports);\r\n        const module = this._private_isModule(source) ? source : await WebAssembly.compile(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = await WebAssembly.instantiate(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    instantiateSync(source, imports = {}) {\r\n        const module = this._private_isModule(source) ? source : new WebAssembly.Module(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = new WebAssembly.Instance(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    async instantiateStreaming(source, imports = {}) {\r\n        if (!WebAssembly.instantiateStreaming) {\r\n            return this.instantiate(this._private_isResponse(source = await source) ?\r\n                source.arrayBuffer() :\r\n                source, imports);\r\n        }\r\n        const extended = this._private_preInstantiate(imports);\r\n        const result = await WebAssembly.instantiateStreaming(source, imports);\r\n        const exports = this._private_postInstantiate(extended, result.instance);\r\n        return { ...result, exports };\r\n    }\r\n}\r\n","_cachedMaps":{}},"_replacements":[],"_isSorted":true},{"_valueIsBuffer":false,"_value":"\n;// CONCATENATED MODULE: ./src/we_utils/src/wasc-worker/WascUtil.ts\n"},{"_source":{"_source":{"_source":{"_valueIsBuffer":false,"_value":"var ACTIONS;\r\n(function (ACTIONS) {\r\n    ACTIONS[ACTIONS[\"COMPILE_MODULE\"] = 0] = \"COMPILE_MODULE\";\r\n    ACTIONS[ACTIONS[\"CALL_FUNCTION_EXPORT\"] = 1] = \"CALL_FUNCTION_EXPORT\";\r\n    ACTIONS[ACTIONS[\"RUN_FUNCTION\"] = 2] = \"RUN_FUNCTION\";\r\n})(ACTIONS || (ACTIONS = {}));\r\nfunction getTransferableParams(...params) {\r\n    return params.filter((x) => ((x instanceof ArrayBuffer) ||\r\n        (x instanceof MessagePort) ||\r\n        (x instanceof ImageBitmap))) || [];\r\n}\r\nfunction myFetch(path, resType = 'arraybuffer', owMime) {\r\n    return new Promise((res) => {\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', path);\r\n        if (owMime)\r\n            request.overrideMimeType(owMime);\r\n        request.responseType = resType;\r\n        request.onload = () => {\r\n            if (request.status != 200)\r\n                console.error(request);\r\n            res(request.response);\r\n        };\r\n        request.send();\r\n    });\r\n}\r\nexport const WascUtil = { _internal_ACTIONS: ACTIONS, _internal_getTransferableParams: getTransferableParams, _internal_myFetch: myFetch };\r\n","_valueAsBuffer":{"type":"Buffer","data":[118,97,114,32,65,67,84,73,79,78,83,59,13,10,40,102,117,110,99,116,105,111,110,32,40,65,67,84,73,79,78,83,41,32,123,13,10,32,32,32,32,65,67,84,73,79,78,83,91,65,67,84,73,79,78,83,91,34,67,79,77,80,73,76,69,95,77,79,68,85,76,69,34,93,32,61,32,48,93,32,61,32,34,67,79,77,80,73,76,69,95,77,79,68,85,76,69,34,59,13,10,32,32,32,32,65,67,84,73,79,78,83,91,65,67,84,73,79,78,83,91,34,67,65,76,76,95,70,85,78,67,84,73,79,78,95,69,88,80,79,82,84,34,93,32,61,32,49,93,32,61,32,34,67,65,76,76,95,70,85,78,67,84,73,79,78,95,69,88,80,79,82,84,34,59,13,10,32,32,32,32,65,67,84,73,79,78,83,91,65,67,84,73,79,78,83,91,34,82,85,78,95,70,85,78,67,84,73,79,78,34,93,32,61,32,50,93,32,61,32,34,82,85,78,95,70,85,78,67,84,73,79,78,34,59,13,10,125,41,40,65,67,84,73,79,78,83,32,124,124,32,40,65,67,84,73,79,78,83,32,61,32,123,125,41,41,59,13,10,102,117,110,99,116,105,111,110,32,103,101,116,84,114,97,110,115,102,101,114,97,98,108,101,80,97,114,97,109,115,40,46,46,46,112,97,114,97,109,115,41,32,123,13,10,32,32,32,32,114,101,116,117,114,110,32,112,97,114,97,109,115,46,102,105,108,116,101,114,40,40,120,41,32,61,62,32,40,40,120,32,105,110,115,116,97,110,99,101,111,102,32,65,114,114,97,121,66,117,102,102,101,114,41,32,124,124,13,10,32,32,32,32,32,32,32,32,40,120,32,105,110,115,116,97,110,99,101,111,102,32,77,101,115,115,97,103,101,80,111,114,116,41,32,124,124,13,10,32,32,32,32,32,32,32,32,40,120,32,105,110,115,116,97,110,99,101,111,102,32,73,109,97,103,101,66,105,116,109,97,112,41,41,41,32,124,124,32,91,93,59,13,10,125,13,10,102,117,110,99,116,105,111,110,32,109,121,70,101,116,99,104,40,112,97,116,104,44,32,114,101,115,84,121,112,101,32,61,32,39,97,114,114,97,121,98,117,102,102,101,114,39,44,32,111,119,77,105,109,101,41,32,123,13,10,32,32,32,32,114,101,116,117,114,110,32,110,101,119,32,80,114,111,109,105,115,101,40,40,114,101,115,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,114,101,113,117,101,115,116,32,61,32,110,101,119,32,88,77,76,72,116,116,112,82,101,113,117,101,115,116,40,41,59,13,10,32,32,32,32,32,32,32,32,114,101,113,117,101,115,116,46,111,112,101,110,40,39,71,69,84,39,44,32,112,97,116,104,41,59,13,10,32,32,32,32,32,32,32,32,105,102,32,40,111,119,77,105,109,101,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,113,117,101,115,116,46,111,118,101,114,114,105,100,101,77,105,109,101,84,121,112,101,40,111,119,77,105,109,101,41,59,13,10,32,32,32,32,32,32,32,32,114,101,113,117,101,115,116,46,114,101,115,112,111,110,115,101,84,121,112,101,32,61,32,114,101,115,84,121,112,101,59,13,10,32,32,32,32,32,32,32,32,114,101,113,117,101,115,116,46,111,110,108,111,97,100,32,61,32,40,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,114,101,113,117,101,115,116,46,115,116,97,116,117,115,32,33,61,32,50,48,48,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,111,108,101,46,101,114,114,111,114,40,114,101,113,117,101,115,116,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,115,40,114,101,113,117,101,115,116,46,114,101,115,112,111,110,115,101,41,59,13,10,32,32,32,32,32,32,32,32,125,59,13,10,32,32,32,32,32,32,32,32,114,101,113,117,101,115,116,46,115,101,110,100,40,41,59,13,10,32,32,32,32,125,41,59,13,10,125,13,10,101,120,112,111,114,116,32,99,111,110,115,116,32,87,97,115,99,85,116,105,108,32,61,32,123,32,95,105,110,116,101,114,110,97,108,95,65,67,84,73,79,78,83,58,32,65,67,84,73,79,78,83,44,32,95,105,110,116,101,114,110,97,108,95,103,101,116,84,114,97,110,115,102,101,114,97,98,108,101,80,97,114,97,109,115,58,32,103,101,116,84,114,97,110,115,102,101,114,97,98,108,101,80,97,114,97,109,115,44,32,95,105,110,116,101,114,110,97,108,95,109,121,70,101,116,99,104,58,32,109,121,70,101,116,99,104,32,125,59,13,10]}},"_replacements":[{"start":951,"end":957,"content":"","insertIndex":0}],"_isSorted":true},"_cachedSource":"var ACTIONS;\r\n(function (ACTIONS) {\r\n    ACTIONS[ACTIONS[\"COMPILE_MODULE\"] = 0] = \"COMPILE_MODULE\";\r\n    ACTIONS[ACTIONS[\"CALL_FUNCTION_EXPORT\"] = 1] = \"CALL_FUNCTION_EXPORT\";\r\n    ACTIONS[ACTIONS[\"RUN_FUNCTION\"] = 2] = \"RUN_FUNCTION\";\r\n})(ACTIONS || (ACTIONS = {}));\r\nfunction getTransferableParams(...params) {\r\n    return params.filter((x) => ((x instanceof ArrayBuffer) ||\r\n        (x instanceof MessagePort) ||\r\n        (x instanceof ImageBitmap))) || [];\r\n}\r\nfunction myFetch(path, resType = 'arraybuffer', owMime) {\r\n    return new Promise((res) => {\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', path);\r\n        if (owMime)\r\n            request.overrideMimeType(owMime);\r\n        request.responseType = resType;\r\n        request.onload = () => {\r\n            if (request.status != 200)\r\n                console.error(request);\r\n            res(request.response);\r\n        };\r\n        request.send();\r\n    });\r\n}\r\nconst WascUtil = { _internal_ACTIONS: ACTIONS, _internal_getTransferableParams: getTransferableParams, _internal_myFetch: myFetch };\r\n","_cachedMaps":{}},"_replacements":[],"_isSorted":true},{"_valueIsBuffer":false,"_value":"\n;// CONCATENATED MODULE: ./node_modules/awesome-typescript-loader/dist/entry.js??ruleSet[1].rules[0]!./src/we_utils/src/wasc-worker/Wasc.ts\n"},{"_source":{"_source":{"_source":{"_valueIsBuffer":false,"_value":"'use strict';\r\nimport { WascLoader } from './WascLoader';\r\nimport { WascUtil } from './WascUtil';\r\nconst wascw = self;\r\nconst memory = new WebAssembly.Memory({ initial: 4096 });\r\nlet ascImports;\r\nlet ascInstance;\r\nlet ascModule;\r\nlet ascExports;\r\nconst staticImports = {\r\n    env: {\r\n        memory,\r\n        logf(value) {\r\n            console.log('F64: ' + value);\r\n        },\r\n        logi(value) {\r\n            console.log('U32: ' + value);\r\n        },\r\n    },\r\n};\r\nwascw.addEventListener('message', (e) => {\r\n    const { id, action, payload, getImportObject } = e.data;\r\n    const sendMessage = (result, payload) => {\r\n        wascw.postMessage({\r\n            id,\r\n            action,\r\n            result,\r\n            payload,\r\n        }, WascUtil._internal_getTransferableParams(payload));\r\n    };\r\n    const onError = (ex) => sendMessage(1, ex);\r\n    const onSuccess = (res) => sendMessage(0, res);\r\n    if (action === WascUtil._internal_ACTIONS.COMPILE_MODULE) {\r\n        Promise.resolve()\r\n            .then(async () => {\r\n            ascImports = Object.assign({}, staticImports);\r\n            if (typeof getImportObject == 'function') {\r\n                Object.assign(ascImports, getImportObject());\r\n            }\r\n            const byteModule = await WascUtil._internal_myFetch(payload);\r\n            const inst = new WascLoader().instantiateSync(byteModule, ascImports);\r\n            ascModule = inst.module;\r\n            ascInstance = inst.instance;\r\n            ascExports = inst.exports;\r\n            onSuccess({\r\n                exports: Object.keys(ascExports),\r\n            });\r\n        })\r\n            .catch(onError);\r\n    }\r\n    else if (action === WascUtil._internal_ACTIONS.CALL_FUNCTION_EXPORT) {\r\n        const { func, params } = payload;\r\n        Promise.resolve().then(() => {\r\n            onSuccess(ascExports[func].apply(ascExports, params));\r\n        }).catch(onError);\r\n    }\r\n    else if (action === WascUtil._internal_ACTIONS.RUN_FUNCTION) {\r\n        const { func, params } = payload;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            const fun = new Function(`return ${func}`)();\r\n            onSuccess(fun({\r\n                module: ascModule,\r\n                instance: ascInstance,\r\n                exports: ascExports,\r\n                params,\r\n            }));\r\n        })\r\n            .catch(onError);\r\n    }\r\n});\r\n","_valueAsBuffer":{"type":"Buffer","data":[39,117,115,101,32,115,116,114,105,99,116,39,59,13,10,105,109,112,111,114,116,32,123,32,87,97,115,99,76,111,97,100,101,114,32,125,32,102,114,111,109,32,39,46,47,87,97,115,99,76,111,97,100,101,114,39,59,13,10,105,109,112,111,114,116,32,123,32,87,97,115,99,85,116,105,108,32,125,32,102,114,111,109,32,39,46,47,87,97,115,99,85,116,105,108,39,59,13,10,99,111,110,115,116,32,119,97,115,99,119,32,61,32,115,101,108,102,59,13,10,99,111,110,115,116,32,109,101,109,111,114,121,32,61,32,110,101,119,32,87,101,98,65,115,115,101,109,98,108,121,46,77,101,109,111,114,121,40,123,32,105,110,105,116,105,97,108,58,32,52,48,57,54,32,125,41,59,13,10,108,101,116,32,97,115,99,73,109,112,111,114,116,115,59,13,10,108,101,116,32,97,115,99,73,110,115,116,97,110,99,101,59,13,10,108,101,116,32,97,115,99,77,111,100,117,108,101,59,13,10,108,101,116,32,97,115,99,69,120,112,111,114,116,115,59,13,10,99,111,110,115,116,32,115,116,97,116,105,99,73,109,112,111,114,116,115,32,61,32,123,13,10,32,32,32,32,101,110,118,58,32,123,13,10,32,32,32,32,32,32,32,32,109,101,109,111,114,121,44,13,10,32,32,32,32,32,32,32,32,108,111,103,102,40,118,97,108,117,101,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,111,108,101,46,108,111,103,40,39,70,54,52,58,32,39,32,43,32,118,97,108,117,101,41,59,13,10,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,32,32,32,32,108,111,103,105,40,118,97,108,117,101,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,111,108,101,46,108,111,103,40,39,85,51,50,58,32,39,32,43,32,118,97,108,117,101,41,59,13,10,32,32,32,32,32,32,32,32,125,44,13,10,32,32,32,32,125,44,13,10,125,59,13,10,119,97,115,99,119,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,40,39,109,101,115,115,97,103,101,39,44,32,40,101,41,32,61,62,32,123,13,10,32,32,32,32,99,111,110,115,116,32,123,32,105,100,44,32,97,99,116,105,111,110,44,32,112,97,121,108,111,97,100,44,32,103,101,116,73,109,112,111,114,116,79,98,106,101,99,116,32,125,32,61,32,101,46,100,97,116,97,59,13,10,32,32,32,32,99,111,110,115,116,32,115,101,110,100,77,101,115,115,97,103,101,32,61,32,40,114,101,115,117,108,116,44,32,112,97,121,108,111,97,100,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,119,97,115,99,119,46,112,111,115,116,77,101,115,115,97,103,101,40,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,100,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,97,99,116,105,111,110,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,114,101,115,117,108,116,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,112,97,121,108,111,97,100,44,13,10,32,32,32,32,32,32,32,32,125,44,32,87,97,115,99,85,116,105,108,46,95,105,110,116,101,114,110,97,108,95,103,101,116,84,114,97,110,115,102,101,114,97,98,108,101,80,97,114,97,109,115,40,112,97,121,108,111,97,100,41,41,59,13,10,32,32,32,32,125,59,13,10,32,32,32,32,99,111,110,115,116,32,111,110,69,114,114,111,114,32,61,32,40,101,120,41,32,61,62,32,115,101,110,100,77,101,115,115,97,103,101,40,49,44,32,101,120,41,59,13,10,32,32,32,32,99,111,110,115,116,32,111,110,83,117,99,99,101,115,115,32,61,32,40,114,101,115,41,32,61,62,32,115,101,110,100,77,101,115,115,97,103,101,40,48,44,32,114,101,115,41,59,13,10,32,32,32,32,105,102,32,40,97,99,116,105,111,110,32,61,61,61,32,87,97,115,99,85,116,105,108,46,95,105,110,116,101,114,110,97,108,95,65,67,84,73,79,78,83,46,67,79,77,80,73,76,69,95,77,79,68,85,76,69,41,32,123,13,10,32,32,32,32,32,32,32,32,80,114,111,109,105,115,101,46,114,101,115,111,108,118,101,40,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,46,116,104,101,110,40,97,115,121,110,99,32,40,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,97,115,99,73,109,112,111,114,116,115,32,61,32,79,98,106,101,99,116,46,97,115,115,105,103,110,40,123,125,44,32,115,116,97,116,105,99,73,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,105,102,32,40,116,121,112,101,111,102,32,103,101,116,73,109,112,111,114,116,79,98,106,101,99,116,32,61,61,32,39,102,117,110,99,116,105,111,110,39,41,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,79,98,106,101,99,116,46,97,115,115,105,103,110,40,97,115,99,73,109,112,111,114,116,115,44,32,103,101,116,73,109,112,111,114,116,79,98,106,101,99,116,40,41,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,98,121,116,101,77,111,100,117,108,101,32,61,32,97,119,97,105,116,32,87,97,115,99,85,116,105,108,46,95,105,110,116,101,114,110,97,108,95,109,121,70,101,116,99,104,40,112,97,121,108,111,97,100,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,105,110,115,116,32,61,32,110,101,119,32,87,97,115,99,76,111,97,100,101,114,40,41,46,105,110,115,116,97,110,116,105,97,116,101,83,121,110,99,40,98,121,116,101,77,111,100,117,108,101,44,32,97,115,99,73,109,112,111,114,116,115,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,97,115,99,77,111,100,117,108,101,32,61,32,105,110,115,116,46,109,111,100,117,108,101,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,97,115,99,73,110,115,116,97,110,99,101,32,61,32,105,110,115,116,46,105,110,115,116,97,110,99,101,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,97,115,99,69,120,112,111,114,116,115,32,61,32,105,110,115,116,46,101,120,112,111,114,116,115,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,111,110,83,117,99,99,101,115,115,40,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,120,112,111,114,116,115,58,32,79,98,106,101,99,116,46,107,101,121,115,40,97,115,99,69,120,112,111,114,116,115,41,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,41,59,13,10,32,32,32,32,32,32,32,32,125,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,46,99,97,116,99,104,40,111,110,69,114,114,111,114,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,101,108,115,101,32,105,102,32,40,97,99,116,105,111,110,32,61,61,61,32,87,97,115,99,85,116,105,108,46,95,105,110,116,101,114,110,97,108,95,65,67,84,73,79,78,83,46,67,65,76,76,95,70,85,78,67,84,73,79,78,95,69,88,80,79,82,84,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,123,32,102,117,110,99,44,32,112,97,114,97,109,115,32,125,32,61,32,112,97,121,108,111,97,100,59,13,10,32,32,32,32,32,32,32,32,80,114,111,109,105,115,101,46,114,101,115,111,108,118,101,40,41,46,116,104,101,110,40,40,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,111,110,83,117,99,99,101,115,115,40,97,115,99,69,120,112,111,114,116,115,91,102,117,110,99,93,46,97,112,112,108,121,40,97,115,99,69,120,112,111,114,116,115,44,32,112,97,114,97,109,115,41,41,59,13,10,32,32,32,32,32,32,32,32,125,41,46,99,97,116,99,104,40,111,110,69,114,114,111,114,41,59,13,10,32,32,32,32,125,13,10,32,32,32,32,101,108,115,101,32,105,102,32,40,97,99,116,105,111,110,32,61,61,61,32,87,97,115,99,85,116,105,108,46,95,105,110,116,101,114,110,97,108,95,65,67,84,73,79,78,83,46,82,85,78,95,70,85,78,67,84,73,79,78,41,32,123,13,10,32,32,32,32,32,32,32,32,99,111,110,115,116,32,123,32,102,117,110,99,44,32,112,97,114,97,109,115,32,125,32,61,32,112,97,121,108,111,97,100,59,13,10,32,32,32,32,32,32,32,32,80,114,111,109,105,115,101,46,114,101,115,111,108,118,101,40,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,46,116,104,101,110,40,40,41,32,61,62,32,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,102,117,110,32,61,32,110,101,119,32,70,117,110,99,116,105,111,110,40,96,114,101,116,117,114,110,32,36,123,102,117,110,99,125,96,41,40,41,59,13,10,32,32,32,32,32,32,32,32,32,32,32,32,111,110,83,117,99,99,101,115,115,40,102,117,110,40,123,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,109,111,100,117,108,101,58,32,97,115,99,77,111,100,117,108,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,105,110,115,116,97,110,99,101,58,32,97,115,99,73,110,115,116,97,110,99,101,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,101,120,112,111,114,116,115,58,32,97,115,99,69,120,112,111,114,116,115,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,97,114,97,109,115,44,13,10,32,32,32,32,32,32,32,32,32,32,32,32,125,41,41,59,13,10,32,32,32,32,32,32,32,32,125,41,13,10,32,32,32,32,32,32,32,32,32,32,32,32,46,99,97,116,99,104,40,111,110,69,114,114,111,114,41,59,13,10,32,32,32,32,125,13,10,125,41,59,13,10]}},"_replacements":[{"start":1934,"end":1972,"content":"hxckl29._","insertIndex":5},{"start":1672,"end":1718,"content":"hxo5o65._","insertIndex":4},{"start":1331,"end":1340,"content":"hxx5913._","insertIndex":3},{"start":1264,"end":1289,"content":"hxlj845._","insertIndex":2},{"start":926,"end":966,"content":"hxn1g95._","insertIndex":1},{"start":744,"end":783,"content":"hx7w375._","insertIndex":0},{"start":59,"end":96,"content":"","insertIndex":8},{"start":15,"end":56,"content":"","insertIndex":7},{"start":0,"end":12,"content":"","insertIndex":6}],"_isSorted":true},"_cachedSource":"\r\n\r\n\r\nconst wascw = self;\r\nconst memory = new WebAssembly.Memory({ initial: 4096 });\r\nlet ascImports;\r\nlet ascInstance;\r\nlet ascModule;\r\nlet ascExports;\r\nconst staticImports = {\r\n    env: {\r\n        memory,\r\n        logf(value) {\r\n            console.log('F64: ' + value);\r\n        },\r\n        logi(value) {\r\n            console.log('U32: ' + value);\r\n        },\r\n    },\r\n};\r\nwascw.addEventListener('message', (e) => {\r\n    const { id, action, payload, getImportObject } = e.data;\r\n    const sendMessage = (result, payload) => {\r\n        wascw.postMessage({\r\n            id,\r\n            action,\r\n            result,\r\n            payload,\r\n        }, hx7w375._(payload));\r\n    };\r\n    const onError = (ex) => sendMessage(1, ex);\r\n    const onSuccess = (res) => sendMessage(0, res);\r\n    if (action === hxn1g95._) {\r\n        Promise.resolve()\r\n            .then(async () => {\r\n            ascImports = Object.assign({}, staticImports);\r\n            if (typeof getImportObject == 'function') {\r\n                Object.assign(ascImports, getImportObject());\r\n            }\r\n            const byteModule = await hxlj845._(payload);\r\n            const inst = new hxx5913._().instantiateSync(byteModule, ascImports);\r\n            ascModule = inst.module;\r\n            ascInstance = inst.instance;\r\n            ascExports = inst.exports;\r\n            onSuccess({\r\n                exports: Object.keys(ascExports),\r\n            });\r\n        })\r\n            .catch(onError);\r\n    }\r\n    else if (action === hxo5o65._) {\r\n        const { func, params } = payload;\r\n        Promise.resolve().then(() => {\r\n            onSuccess(ascExports[func].apply(ascExports, params));\r\n        }).catch(onError);\r\n    }\r\n    else if (action === hxckl29._) {\r\n        const { func, params } = payload;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            const fun = new Function(`return ${func}`)();\r\n            onSuccess(fun({\r\n                module: ascModule,\r\n                instance: ascInstance,\r\n                exports: ascExports,\r\n                params,\r\n            }));\r\n        })\r\n            .catch(onError);\r\n    }\r\n});\r\n","_cachedMaps":{}},"_replacements":[{"start":2307,"end":2443,"content":"WascUtil._internal_ACTIONS.RUN_FUNCTION","insertIndex":5},{"start":1939,"end":2091,"content":"WascUtil._internal_ACTIONS.CALL_FUNCTION_EXPORT","insertIndex":4},{"start":1524,"end":1607,"content":"WascLoader","insertIndex":3},{"start":1371,"end":1482,"content":"WascUtil._internal_myFetch","insertIndex":2},{"start":933,"end":1073,"content":"WascUtil._internal_ACTIONS.COMPILE_MODULE","insertIndex":1},{"start":651,"end":790,"content":"WascUtil._internal_getTransferableParams","insertIndex":0}],"_isSorted":true}],"_isOptimized":true},"_cachedSource":"\n;// CONCATENATED MODULE: ./src/we_utils/src/wasc-worker/WascLoader.ts\nclass WascLoader {\r\n    constructor() {\r\n        this._internal_ID_OFFSET = -8;\r\n        this._internal_SIZE_OFFSET = -4;\r\n        this._internal_ARRAYBUFFER_ID = 0;\r\n        this._internal_STRING_ID = 1;\r\n        this._internal_ARRAYBUFFERVIEW = 1 << 0;\r\n        this._internal_ARRAY = 1 << 1;\r\n        this._internal_STATICARRAY = 1 << 2;\r\n        this._internal_VAL_ALIGN_OFFSET = 6;\r\n        this._internal_VAL_SIGNED = 1 << 11;\r\n        this._internal_VAL_FLOAT = 1 << 12;\r\n        this._internal_VAL_MANAGED = 1 << 14;\r\n        this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\r\n        this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\r\n        this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\r\n        this._internal_ARRAYBUFFERVIEW_SIZE = 12;\r\n        this._internal_ARRAY_LENGTH_OFFSET = 12;\r\n        this._internal_ARRAY_SIZE = 16;\r\n        this._internal__THIS = Symbol();\r\n        this._internal_STRING_DECODE_THRESHOLD = 32;\r\n        this._internal_decoder = new TextDecoder('utf-16le');\r\n        this._internal_E_NOEXPORTRUNTIME = 'Operation requires compiling with --exportRuntime';\r\n    }\r\n    _private_err_noRuntime() {\r\n        throw Error(this._internal_E_NOEXPORTRUNTIME);\r\n    }\r\n    ;\r\n    _private_getStringImpl(buffer, ptr) {\r\n        const len = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2] >>> 1;\r\n        const arr = new Uint16Array(buffer, ptr, len);\r\n        if (len <= this._internal_STRING_DECODE_THRESHOLD) {\r\n            return String.fromCharCode(...arr);\r\n        }\r\n        return this._internal_decoder.decode(arr);\r\n    }\r\n    _private_preInstantiate(imports) {\r\n        const extendedExports = {};\r\n        const getString = (memory, ptr) => {\r\n            if (!memory)\r\n                return '<yet unknown>';\r\n            return this._private_getStringImpl(memory.buffer, ptr);\r\n        };\r\n        const env = (imports.env = imports.env || {});\r\n        env.abort = env.abort || function abort(msg, file, line, colm) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\r\n        };\r\n        env.trace = env.trace || function trace(msg, n, ...args) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            console.log(`trace: ${getString(memory, msg)}${n ? ' ' : ''}${args.slice(0, n).join(', ')}`);\r\n        };\r\n        env.seed = env.seed || Date.now;\r\n        imports.Math = imports.Math || Math;\r\n        imports.Date = imports.Date || Date;\r\n        return extendedExports;\r\n    }\r\n    _private_postInstantiate(extendedExports, instance) {\r\n        const exports = instance.exports;\r\n        const memory = exports.memory;\r\n        const table = exports.table;\r\n        const __new = (exports.__new || this._private_err_noRuntime);\r\n        const __collect = (exports.__collect || this._private_err_noRuntime);\r\n        const __pin = (exports.__pin || this._private_err_noRuntime);\r\n        const __unpin = (exports.__unpin || this._private_err_noRuntime);\r\n        const __rtti_base = (exports.__rtti_base);\r\n        const getRttiCount = __rtti_base ?\r\n            function (arr) {\r\n                return arr[__rtti_base >>> 2];\r\n            } :\r\n            this._private_err_noRuntime;\r\n        const getInfo = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2];\r\n        };\r\n        const getArrayInfo = (id) => {\r\n            const info = getInfo(id);\r\n            if (!(info & (this._internal_ARRAYBUFFERVIEW | this._internal_ARRAY | this._internal_STATICARRAY)))\r\n                throw Error(`not an array: ${id}, flags=${info}`);\r\n            return info;\r\n        };\r\n        const getBase = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];\r\n        };\r\n        const getValueAlign = (info) => {\r\n            return 31 - Math.clz32((info >>> this._internal_VAL_ALIGN_OFFSET) & 31);\r\n        };\r\n        const getView = (alignLog2, signed, float) => {\r\n            const buffer = memory.buffer;\r\n            if (float) {\r\n                switch (alignLog2) {\r\n                    case 2: return new Float32Array(buffer);\r\n                    case 3: return new Float64Array(buffer);\r\n                }\r\n            }\r\n            else {\r\n                switch (alignLog2) {\r\n                    case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\r\n                    case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\r\n                    case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\r\n                    case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\r\n                }\r\n            }\r\n            throw Error(`unsupported align: ${alignLog2}`);\r\n        };\r\n        const getTypedArray = (Type, alignLog2, ptr) => {\r\n            return new Type(getTypedArrayView(Type, alignLog2, ptr));\r\n        };\r\n        const getTypedArrayView = (Type, alignLog2, ptr) => {\r\n            const buffer = memory.buffer;\r\n            const U32 = new Uint32Array(buffer);\r\n            const bufPtr = U32[ptr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            return new Type(buffer, bufPtr, U32[bufPtr + this._internal_SIZE_OFFSET >>> 2] >>> alignLog2);\r\n        };\r\n        const attachTypedArrayFunctions = (ctor, name, align) => {\r\n            extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\r\n            extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\r\n        };\r\n        const __newString = (str) => {\r\n            if (str == null)\r\n                return 0;\r\n            const length = str.length;\r\n            const ptr = __new(length << 1, this._internal_STRING_ID);\r\n            const U16 = new Uint16Array(memory.buffer);\r\n            for (let i = 0, p = ptr >>> 1; i < length; ++i)\r\n                U16[p + i] = str.charCodeAt(i);\r\n            return ptr;\r\n        };\r\n        const __getString = (ptr) => {\r\n            if (!ptr)\r\n                return null;\r\n            const buffer = memory.buffer;\r\n            const id = new Uint32Array(buffer)[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id !== this._internal_STRING_ID)\r\n                throw Error(`not a string: ${ptr}`);\r\n            return this._private_getStringImpl(buffer, ptr);\r\n        };\r\n        const __newArray = (id, values) => {\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            const length = values.length;\r\n            const buf = __new(length << align, info & this._internal_STATICARRAY ? id : this._internal_ARRAYBUFFER_ID);\r\n            let result;\r\n            if (info & this._internal_STATICARRAY) {\r\n                result = buf;\r\n            }\r\n            else {\r\n                __pin(buf);\r\n                const arr = __new(info & this._internal_ARRAY ? this._internal_ARRAY_SIZE : this._internal_ARRAYBUFFERVIEW_SIZE, id);\r\n                __unpin(buf);\r\n                const U32 = new Uint32Array(memory.buffer);\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\r\n                if (info & this._internal_ARRAY)\r\n                    U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] = length;\r\n                result = arr;\r\n            }\r\n            const view = getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT);\r\n            if (info & this._internal_VAL_MANAGED) {\r\n                for (let i = 0; i < length; ++i) {\r\n                    const value = values[i];\r\n                    view[(buf >>> align) + i] = value;\r\n                }\r\n            }\r\n            else {\r\n                view.set(values, buf >>> align);\r\n            }\r\n            return result;\r\n        };\r\n        const __getArrayView = (arr) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const id = U32[arr + this._internal_ID_OFFSET >>> 2];\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            let buf = info & this._internal_STATICARRAY ?\r\n                arr :\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            const length = info & this._internal_ARRAY ?\r\n                U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] :\r\n                U32[buf + this._internal_SIZE_OFFSET >>> 2] >>> align;\r\n            return getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT).subarray(buf >>>= align, buf + length);\r\n        };\r\n        const __getArray = (arr) => {\r\n            const input = __getArrayView(arr);\r\n            const len = input.length;\r\n            const out = new Array(len);\r\n            for (let i = 0; i < len; i++)\r\n                out[i] = input[i];\r\n            return out;\r\n        };\r\n        const __getArrayBuffer = (ptr) => {\r\n            const buffer = memory.buffer;\r\n            const length = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2];\r\n            return buffer.slice(ptr, ptr + length);\r\n        };\r\n        const __instanceof = (ptr, baseId) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            let id = U32[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id <= getRttiCount(U32)) {\r\n                do {\r\n                    if (id == baseId)\r\n                        return true;\r\n                    id = getBase(id);\r\n                } while (id);\r\n            }\r\n            return false;\r\n        };\r\n        extendedExports.__new = __new;\r\n        extendedExports.__pin = __pin;\r\n        extendedExports.__unpin = __unpin;\r\n        extendedExports.__collect = __collect;\r\n        extendedExports.__newString = __newString;\r\n        extendedExports.__getString = __getString;\r\n        extendedExports.__newArray = __newArray;\r\n        extendedExports.__getArrayView = __getArrayView;\r\n        extendedExports.__getArray = __getArray;\r\n        extendedExports.__getArrayBuffer = __getArrayBuffer;\r\n        extendedExports.__instanceof = __instanceof;\r\n        [\r\n            Int8Array,\r\n            Uint8Array,\r\n            Uint8ClampedArray,\r\n            Int16Array,\r\n            Uint16Array,\r\n            Int32Array,\r\n            Uint32Array,\r\n            Float32Array,\r\n            Float64Array,\r\n        ].forEach((ctor) => {\r\n            attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\r\n        });\r\n        if (typeof BigUint64Array !== 'undefined') {\r\n            [BigUint64Array, BigInt64Array].forEach((ctor) => {\r\n                attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\r\n            });\r\n        }\r\n        extendedExports.memory = extendedExports.memory || memory;\r\n        extendedExports.table = extendedExports.table || table;\r\n        return this._private_demangle(exports, extendedExports);\r\n    }\r\n    _private_isResponse(src) {\r\n        return typeof Response !== 'undefined' && src instanceof Response;\r\n    }\r\n    _private_isModule(src) {\r\n        return src instanceof WebAssembly.Module;\r\n    }\r\n    _private_demangle(exports, extendedExports = {}) {\r\n        const setArgumentsLength = exports['__argumentsLength'] ?\r\n            (length) => {\r\n                exports['__argumentsLength'].value = length;\r\n            } :\r\n            exports['__setArgumentsLength'] || exports['__setargc'] || (() => { });\r\n        for (const internalName in exports) {\r\n            if (!Object.prototype.hasOwnProperty.call(exports, internalName))\r\n                continue;\r\n            const elem = exports[internalName];\r\n            const parts = internalName.split('.');\r\n            let curr = extendedExports;\r\n            while (parts.length > 1) {\r\n                const part = parts.shift();\r\n                if (!Object.prototype.hasOwnProperty.call(curr, part))\r\n                    curr[part] = {};\r\n                curr = curr[part];\r\n            }\r\n            let name = parts[0];\r\n            const hash = name.indexOf('#');\r\n            if (hash >= 0) {\r\n                const className = name.substring(0, hash);\r\n                const classElem = curr[className];\r\n                if (typeof classElem === 'undefined' || !classElem.prototype) {\r\n                    const ctor = function (...args) {\r\n                        return ctor._internal_wrap(ctor.prototype.constructor(0, ...args));\r\n                    };\r\n                    ctor.prototype = {\r\n                        _internal_valueOf() {\r\n                            return this[this._THIS];\r\n                        },\r\n                    };\r\n                    ctor._internal_wrap = function (thisValue) {\r\n                        return Object.create(ctor.prototype, { [this._THIS]: { value: thisValue, writable: false } });\r\n                    };\r\n                    if (classElem) {\r\n                        Object.getOwnPropertyNames(classElem).forEach((name) => Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name)));\r\n                    }\r\n                    curr[className] = ctor;\r\n                }\r\n                name = name.substring(hash + 1);\r\n                curr = curr[className].prototype;\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        const getter = exports[internalName.replace('set:', 'get:')];\r\n                        const setter = exports[internalName.replace('get:', 'set:')];\r\n                        Object.defineProperty(curr, name, {\r\n                            _internal_get() {\r\n                                return getter(this[this._THIS]);\r\n                            },\r\n                            _internal_set(value) {\r\n                                setter(this[this._THIS], value);\r\n                            },\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    if (name === 'constructor') {\r\n                        (curr[name] = (...args) => {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(...args);\r\n                        }).original = elem;\r\n                    }\r\n                    else {\r\n                        (curr[name] = function (...args) {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(this[this._THIS], ...args);\r\n                        }).original = elem;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        Object.defineProperty(curr, name, {\r\n                            get: exports[internalName.replace('set:', 'get:')],\r\n                            set: exports[internalName.replace('get:', 'set:')],\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else if (typeof elem === 'function' && elem !== setArgumentsLength) {\r\n                    (curr[name] = (...args) => {\r\n                        setArgumentsLength(args.length);\r\n                        return elem(...args);\r\n                    }).original = elem;\r\n                }\r\n                else {\r\n                    curr[name] = elem;\r\n                }\r\n            }\r\n        }\r\n        return extendedExports;\r\n    }\r\n    async instantiate(source, imports = {}) {\r\n        if (this._private_isResponse(source = await source))\r\n            return this.instantiateStreaming(source, imports);\r\n        const module = this._private_isModule(source) ? source : await WebAssembly.compile(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = await WebAssembly.instantiate(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    instantiateSync(source, imports = {}) {\r\n        const module = this._private_isModule(source) ? source : new WebAssembly.Module(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = new WebAssembly.Instance(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    async instantiateStreaming(source, imports = {}) {\r\n        if (!WebAssembly.instantiateStreaming) {\r\n            return this.instantiate(this._private_isResponse(source = await source) ?\r\n                source.arrayBuffer() :\r\n                source, imports);\r\n        }\r\n        const extended = this._private_preInstantiate(imports);\r\n        const result = await WebAssembly.instantiateStreaming(source, imports);\r\n        const exports = this._private_postInstantiate(extended, result.instance);\r\n        return { ...result, exports };\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/we_utils/src/wasc-worker/WascUtil.ts\nvar ACTIONS;\r\n(function (ACTIONS) {\r\n    ACTIONS[ACTIONS[\"COMPILE_MODULE\"] = 0] = \"COMPILE_MODULE\";\r\n    ACTIONS[ACTIONS[\"CALL_FUNCTION_EXPORT\"] = 1] = \"CALL_FUNCTION_EXPORT\";\r\n    ACTIONS[ACTIONS[\"RUN_FUNCTION\"] = 2] = \"RUN_FUNCTION\";\r\n})(ACTIONS || (ACTIONS = {}));\r\nfunction getTransferableParams(...params) {\r\n    return params.filter((x) => ((x instanceof ArrayBuffer) ||\r\n        (x instanceof MessagePort) ||\r\n        (x instanceof ImageBitmap))) || [];\r\n}\r\nfunction myFetch(path, resType = 'arraybuffer', owMime) {\r\n    return new Promise((res) => {\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', path);\r\n        if (owMime)\r\n            request.overrideMimeType(owMime);\r\n        request.responseType = resType;\r\n        request.onload = () => {\r\n            if (request.status != 200)\r\n                console.error(request);\r\n            res(request.response);\r\n        };\r\n        request.send();\r\n    });\r\n}\r\nconst WascUtil = { _internal_ACTIONS: ACTIONS, _internal_getTransferableParams: getTransferableParams, _internal_myFetch: myFetch };\r\n\n;// CONCATENATED MODULE: ./node_modules/awesome-typescript-loader/dist/entry.js??ruleSet[1].rules[0]!./src/we_utils/src/wasc-worker/Wasc.ts\n\r\n\r\n\r\nconst wascw = self;\r\nconst memory = new WebAssembly.Memory({ initial: 4096 });\r\nlet ascImports;\r\nlet ascInstance;\r\nlet ascModule;\r\nlet ascExports;\r\nconst staticImports = {\r\n    env: {\r\n        memory,\r\n        logf(value) {\r\n            console.log('F64: ' + value);\r\n        },\r\n        logi(value) {\r\n            console.log('U32: ' + value);\r\n        },\r\n    },\r\n};\r\nwascw.addEventListener('message', (e) => {\r\n    const { id, action, payload, getImportObject } = e.data;\r\n    const sendMessage = (result, payload) => {\r\n        wascw.postMessage({\r\n            id,\r\n            action,\r\n            result,\r\n            payload,\r\n        }, WascUtil._internal_getTransferableParamsaction === hxn1g95._) {\r\n        Promise.resolve()\r\n            .then(async () => {\r\n            ascImports = Object.assign({}, staticImports)WascUtil._internal_ACTIONS.COMPILE_MODULE         const byteModule = await hxlj845._(payload);\r\n            const inst = new hxx5913._().instantiateSync(byteModule, ascImports);\r\n            ascModule = inst.module;\r\n            ascInstance = inst.instance;\r\n            ascExports = inst.exports;\r\n            onSuccess({\r\n              WascUtil._internal_myFetchif (action === hxo5o65._) {\r\n        consWascLoadernSuccess(ascExports[func].apply(ascExports, params));\r\n        }).catch(onError);\r\n    }\r\n    else if (action === hxckl29._) {\r\n        const { func, params } = payload;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            const fun = new Function(`return ${func}`)();\r\n            onSuccess(fun({\r\n                moWascUtil._internal_ACTIONS.CALL_FUNCTION_EXPORT          .catch(onError);\r\n    }\r\n});\r\nWascUtil._internal_ACTIONS.RUN_FUNCTION","_cachedMaps":{}},{"_valueIsBuffer":false,"_value":"\n/******/ })()\n;"}],"_isOptimized":true},"_cachedSource":"/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\nvar hxqnr31 = {};\n\n;// CONCATENATED MODULE: ./src/we_utils/src/wasc-worker/WascLoader.ts\nclass WascLoader {\r\n    constructor() {\r\n        this._internal_ID_OFFSET = -8;\r\n        this._internal_SIZE_OFFSET = -4;\r\n        this._internal_ARRAYBUFFER_ID = 0;\r\n        this._internal_STRING_ID = 1;\r\n        this._internal_ARRAYBUFFERVIEW = 1 << 0;\r\n        this._internal_ARRAY = 1 << 1;\r\n        this._internal_STATICARRAY = 1 << 2;\r\n        this._internal_VAL_ALIGN_OFFSET = 6;\r\n        this._internal_VAL_SIGNED = 1 << 11;\r\n        this._internal_VAL_FLOAT = 1 << 12;\r\n        this._internal_VAL_MANAGED = 1 << 14;\r\n        this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\r\n        this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\r\n        this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\r\n        this._internal_ARRAYBUFFERVIEW_SIZE = 12;\r\n        this._internal_ARRAY_LENGTH_OFFSET = 12;\r\n        this._internal_ARRAY_SIZE = 16;\r\n        this._internal__THIS = Symbol();\r\n        this._internal_STRING_DECODE_THRESHOLD = 32;\r\n        this._internal_decoder = new TextDecoder('utf-16le');\r\n        this._internal_E_NOEXPORTRUNTIME = 'Operation requires compiling with --exportRuntime';\r\n    }\r\n    _private_err_noRuntime() {\r\n        throw Error(this._internal_E_NOEXPORTRUNTIME);\r\n    }\r\n    ;\r\n    _private_getStringImpl(buffer, ptr) {\r\n        const len = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2] >>> 1;\r\n        const arr = new Uint16Array(buffer, ptr, len);\r\n        if (len <= this._internal_STRING_DECODE_THRESHOLD) {\r\n            return String.fromCharCode(...arr);\r\n        }\r\n        return this._internal_decoder.decode(arr);\r\n    }\r\n    _private_preInstantiate(imports) {\r\n        const extendedExports = {};\r\n        const getString = (memory, ptr) => {\r\n            if (!memory)\r\n                return '<yet unknown>';\r\n            return this._private_getStringImpl(memory.buffer, ptr);\r\n        };\r\n        const env = (imports.env = imports.env || {});\r\n        env.abort = env.abort || function abort(msg, file, line, colm) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\r\n        };\r\n        env.trace = env.trace || function trace(msg, n, ...args) {\r\n            const memory = extendedExports.memory || env.memory;\r\n            console.log(`trace: ${getString(memory, msg)}${n ? ' ' : ''}${args.slice(0, n).join(', ')}`);\r\n        };\r\n        env.seed = env.seed || Date.now;\r\n        imports.Math = imports.Math || Math;\r\n        imports.Date = imports.Date || Date;\r\n        return extendedExports;\r\n    }\r\n    _private_postInstantiate(extendedExports, instance) {\r\n        const exports = instance.exports;\r\n        const memory = exports.memory;\r\n        const table = exports.table;\r\n        const __new = (exports.__new || this._private_err_noRuntime);\r\n        const __collect = (exports.__collect || this._private_err_noRuntime);\r\n        const __pin = (exports.__pin || this._private_err_noRuntime);\r\n        const __unpin = (exports.__unpin || this._private_err_noRuntime);\r\n        const __rtti_base = (exports.__rtti_base);\r\n        const getRttiCount = __rtti_base ?\r\n            function (arr) {\r\n                return arr[__rtti_base >>> 2];\r\n            } :\r\n            this._private_err_noRuntime;\r\n        const getInfo = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2];\r\n        };\r\n        const getArrayInfo = (id) => {\r\n            const info = getInfo(id);\r\n            if (!(info & (this._internal_ARRAYBUFFERVIEW | this._internal_ARRAY | this._internal_STATICARRAY)))\r\n                throw Error(`not an array: ${id}, flags=${info}`);\r\n            return info;\r\n        };\r\n        const getBase = (id) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const count = getRttiCount(U32);\r\n            if ((id >>>= 0) >= count)\r\n                throw Error(`invalid id: ${id}`);\r\n            return U32[(__rtti_base + 4 >>> 2) + id * 2 + 1];\r\n        };\r\n        const getValueAlign = (info) => {\r\n            return 31 - Math.clz32((info >>> this._internal_VAL_ALIGN_OFFSET) & 31);\r\n        };\r\n        const getView = (alignLog2, signed, float) => {\r\n            const buffer = memory.buffer;\r\n            if (float) {\r\n                switch (alignLog2) {\r\n                    case 2: return new Float32Array(buffer);\r\n                    case 3: return new Float64Array(buffer);\r\n                }\r\n            }\r\n            else {\r\n                switch (alignLog2) {\r\n                    case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\r\n                    case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\r\n                    case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\r\n                    case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\r\n                }\r\n            }\r\n            throw Error(`unsupported align: ${alignLog2}`);\r\n        };\r\n        const getTypedArray = (Type, alignLog2, ptr) => {\r\n            return new Type(getTypedArrayView(Type, alignLog2, ptr));\r\n        };\r\n        const getTypedArrayView = (Type, alignLog2, ptr) => {\r\n            const buffer = memory.buffer;\r\n            const U32 = new Uint32Array(buffer);\r\n            const bufPtr = U32[ptr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            return new Type(buffer, bufPtr, U32[bufPtr + this._internal_SIZE_OFFSET >>> 2] >>> alignLog2);\r\n        };\r\n        const attachTypedArrayFunctions = (ctor, name, align) => {\r\n            extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\r\n            extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\r\n        };\r\n        const __newString = (str) => {\r\n            if (str == null)\r\n                return 0;\r\n            const length = str.length;\r\n            const ptr = __new(length << 1, this._internal_STRING_ID);\r\n            const U16 = new Uint16Array(memory.buffer);\r\n            for (let i = 0, p = ptr >>> 1; i < length; ++i)\r\n                U16[p + i] = str.charCodeAt(i);\r\n            return ptr;\r\n        };\r\n        const __getString = (ptr) => {\r\n            if (!ptr)\r\n                return null;\r\n            const buffer = memory.buffer;\r\n            const id = new Uint32Array(buffer)[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id !== this._internal_STRING_ID)\r\n                throw Error(`not a string: ${ptr}`);\r\n            return this._private_getStringImpl(buffer, ptr);\r\n        };\r\n        const __newArray = (id, values) => {\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            const length = values.length;\r\n            const buf = __new(length << align, info & this._internal_STATICARRAY ? id : this._internal_ARRAYBUFFER_ID);\r\n            let result;\r\n            if (info & this._internal_STATICARRAY) {\r\n                result = buf;\r\n            }\r\n            else {\r\n                __pin(buf);\r\n                const arr = __new(info & this._internal_ARRAY ? this._internal_ARRAY_SIZE : this._internal_ARRAYBUFFERVIEW_SIZE, id);\r\n                __unpin(buf);\r\n                const U32 = new Uint32Array(memory.buffer);\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\r\n                if (info & this._internal_ARRAY)\r\n                    U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] = length;\r\n                result = arr;\r\n            }\r\n            const view = getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT);\r\n            if (info & this._internal_VAL_MANAGED) {\r\n                for (let i = 0; i < length; ++i) {\r\n                    const value = values[i];\r\n                    view[(buf >>> align) + i] = value;\r\n                }\r\n            }\r\n            else {\r\n                view.set(values, buf >>> align);\r\n            }\r\n            return result;\r\n        };\r\n        const __getArrayView = (arr) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            const id = U32[arr + this._internal_ID_OFFSET >>> 2];\r\n            const info = getArrayInfo(id);\r\n            const align = getValueAlign(info);\r\n            let buf = info & this._internal_STATICARRAY ?\r\n                arr :\r\n                U32[arr + this._internal_ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\r\n            const length = info & this._internal_ARRAY ?\r\n                U32[arr + this._internal_ARRAY_LENGTH_OFFSET >>> 2] :\r\n                U32[buf + this._internal_SIZE_OFFSET >>> 2] >>> align;\r\n            return getView(align, info & this._internal_VAL_SIGNED, info & this._internal_VAL_FLOAT).subarray(buf >>>= align, buf + length);\r\n        };\r\n        const __getArray = (arr) => {\r\n            const input = __getArrayView(arr);\r\n            const len = input.length;\r\n            const out = new Array(len);\r\n            for (let i = 0; i < len; i++)\r\n                out[i] = input[i];\r\n            return out;\r\n        };\r\n        const __getArrayBuffer = (ptr) => {\r\n            const buffer = memory.buffer;\r\n            const length = new Uint32Array(buffer)[ptr + this._internal_SIZE_OFFSET >>> 2];\r\n            return buffer.slice(ptr, ptr + length);\r\n        };\r\n        const __instanceof = (ptr, baseId) => {\r\n            const U32 = new Uint32Array(memory.buffer);\r\n            let id = U32[ptr + this._internal_ID_OFFSET >>> 2];\r\n            if (id <= getRttiCount(U32)) {\r\n                do {\r\n                    if (id == baseId)\r\n                        return true;\r\n                    id = getBase(id);\r\n                } while (id);\r\n            }\r\n            return false;\r\n        };\r\n        extendedExports.__new = __new;\r\n        extendedExports.__pin = __pin;\r\n        extendedExports.__unpin = __unpin;\r\n        extendedExports.__collect = __collect;\r\n        extendedExports.__newString = __newString;\r\n        extendedExports.__getString = __getString;\r\n        extendedExports.__newArray = __newArray;\r\n        extendedExports.__getArrayView = __getArrayView;\r\n        extendedExports.__getArray = __getArray;\r\n        extendedExports.__getArrayBuffer = __getArrayBuffer;\r\n        extendedExports.__instanceof = __instanceof;\r\n        [\r\n            Int8Array,\r\n            Uint8Array,\r\n            Uint8ClampedArray,\r\n            Int16Array,\r\n            Uint16Array,\r\n            Int32Array,\r\n            Uint32Array,\r\n            Float32Array,\r\n            Float64Array,\r\n        ].forEach((ctor) => {\r\n            attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\r\n        });\r\n        if (typeof BigUint64Array !== 'undefined') {\r\n            [BigUint64Array, BigInt64Array].forEach((ctor) => {\r\n                attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\r\n            });\r\n        }\r\n        extendedExports.memory = extendedExports.memory || memory;\r\n        extendedExports.table = extendedExports.table || table;\r\n        return this._private_demangle(exports, extendedExports);\r\n    }\r\n    _private_isResponse(src) {\r\n        return typeof Response !== 'undefined' && src instanceof Response;\r\n    }\r\n    _private_isModule(src) {\r\n        return src instanceof WebAssembly.Module;\r\n    }\r\n    _private_demangle(exports, extendedExports = {}) {\r\n        const setArgumentsLength = exports['__argumentsLength'] ?\r\n            (length) => {\r\n                exports['__argumentsLength'].value = length;\r\n            } :\r\n            exports['__setArgumentsLength'] || exports['__setargc'] || (() => { });\r\n        for (const internalName in exports) {\r\n            if (!Object.prototype.hasOwnProperty.call(exports, internalName))\r\n                continue;\r\n            const elem = exports[internalName];\r\n            const parts = internalName.split('.');\r\n            let curr = extendedExports;\r\n            while (parts.length > 1) {\r\n                const part = parts.shift();\r\n                if (!Object.prototype.hasOwnProperty.call(curr, part))\r\n                    curr[part] = {};\r\n                curr = curr[part];\r\n            }\r\n            let name = parts[0];\r\n            const hash = name.indexOf('#');\r\n            if (hash >= 0) {\r\n                const className = name.substring(0, hash);\r\n                const classElem = curr[className];\r\n                if (typeof classElem === 'undefined' || !classElem.prototype) {\r\n                    const ctor = function (...args) {\r\n                        return ctor._internal_wrap(ctor.prototype.constructor(0, ...args));\r\n                    };\r\n                    ctor.prototype = {\r\n                        _internal_valueOf() {\r\n                            return this[this._THIS];\r\n                        },\r\n                    };\r\n                    ctor._internal_wrap = function (thisValue) {\r\n                        return Object.create(ctor.prototype, { [this._THIS]: { value: thisValue, writable: false } });\r\n                    };\r\n                    if (classElem) {\r\n                        Object.getOwnPropertyNames(classElem).forEach((name) => Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name)));\r\n                    }\r\n                    curr[className] = ctor;\r\n                }\r\n                name = name.substring(hash + 1);\r\n                curr = curr[className].prototype;\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        const getter = exports[internalName.replace('set:', 'get:')];\r\n                        const setter = exports[internalName.replace('get:', 'set:')];\r\n                        Object.defineProperty(curr, name, {\r\n                            _internal_get() {\r\n                                return getter(this[this._THIS]);\r\n                            },\r\n                            _internal_set(value) {\r\n                                setter(this[this._THIS], value);\r\n                            },\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    if (name === 'constructor') {\r\n                        (curr[name] = (...args) => {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(...args);\r\n                        }).original = elem;\r\n                    }\r\n                    else {\r\n                        (curr[name] = function (...args) {\r\n                            setArgumentsLength(args.length);\r\n                            return elem(this[this._THIS], ...args);\r\n                        }).original = elem;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (/^(get|set):/.test(name)) {\r\n                    if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\r\n                        Object.defineProperty(curr, name, {\r\n                            get: exports[internalName.replace('set:', 'get:')],\r\n                            set: exports[internalName.replace('get:', 'set:')],\r\n                            enumerable: true,\r\n                        });\r\n                    }\r\n                }\r\n                else if (typeof elem === 'function' && elem !== setArgumentsLength) {\r\n                    (curr[name] = (...args) => {\r\n                        setArgumentsLength(args.length);\r\n                        return elem(...args);\r\n                    }).original = elem;\r\n                }\r\n                else {\r\n                    curr[name] = elem;\r\n                }\r\n            }\r\n        }\r\n        return extendedExports;\r\n    }\r\n    async instantiate(source, imports = {}) {\r\n        if (this._private_isResponse(source = await source))\r\n            return this.instantiateStreaming(source, imports);\r\n        const module = this._private_isModule(source) ? source : await WebAssembly.compile(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = await WebAssembly.instantiate(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    instantiateSync(source, imports = {}) {\r\n        const module = this._private_isModule(source) ? source : new WebAssembly.Module(source);\r\n        const extended = this._private_preInstantiate(imports);\r\n        const instance = new WebAssembly.Instance(module, imports);\r\n        const exports = this._private_postInstantiate(extended, instance);\r\n        return { module, instance, exports };\r\n    }\r\n    async instantiateStreaming(source, imports = {}) {\r\n        if (!WebAssembly.instantiateStreaming) {\r\n            return this.instantiate(this._private_isResponse(source = await source) ?\r\n                source.arrayBuffer() :\r\n                source, imports);\r\n        }\r\n        const extended = this._private_preInstantiate(imports);\r\n        const result = await WebAssembly.instantiateStreaming(source, imports);\r\n        const exports = this._private_postInstantiate(extended, result.instance);\r\n        return { ...result, exports };\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/we_utils/src/wasc-worker/WascUtil.ts\nvar ACTIONS;\r\n(function (ACTIONS) {\r\n    ACTIONS[ACTIONS[\"COMPILE_MODULE\"] = 0] = \"COMPILE_MODULE\";\r\n    ACTIONS[ACTIONS[\"CALL_FUNCTION_EXPORT\"] = 1] = \"CALL_FUNCTION_EXPORT\";\r\n    ACTIONS[ACTIONS[\"RUN_FUNCTION\"] = 2] = \"RUN_FUNCTION\";\r\n})(ACTIONS || (ACTIONS = {}));\r\nfunction getTransferableParams(...params) {\r\n    return params.filter((x) => ((x instanceof ArrayBuffer) ||\r\n        (x instanceof MessagePort) ||\r\n        (x instanceof ImageBitmap))) || [];\r\n}\r\nfunction myFetch(path, resType = 'arraybuffer', owMime) {\r\n    return new Promise((res) => {\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', path);\r\n        if (owMime)\r\n            request.overrideMimeType(owMime);\r\n        request.responseType = resType;\r\n        request.onload = () => {\r\n            if (request.status != 200)\r\n                console.error(request);\r\n            res(request.response);\r\n        };\r\n        request.send();\r\n    });\r\n}\r\nconst WascUtil = { _internal_ACTIONS: ACTIONS, _internal_getTransferableParams: getTransferableParams, _internal_myFetch: myFetch };\r\n\n;// CONCATENATED MODULE: ./node_modules/awesome-typescript-loader/dist/entry.js??ruleSet[1].rules[0]!./src/we_utils/src/wasc-worker/Wasc.ts\n\r\n\r\n\r\nconst wascw = self;\r\nconst memory = new WebAssembly.Memory({ initial: 4096 });\r\nlet ascImports;\r\nlet ascInstance;\r\nlet ascModule;\r\nlet ascExports;\r\nconst staticImports = {\r\n    env: {\r\n        memory,\r\n        logf(value) {\r\n            console.log('F64: ' + value);\r\n        },\r\n        logi(value) {\r\n            console.log('U32: ' + value);\r\n        },\r\n    },\r\n};\r\nwascw.addEventListener('message', (e) => {\r\n    const { id, action, payload, getImportObject } = e.data;\r\n    const sendMessage = (result, payload) => {\r\n        wascw.postMessage({\r\n            id,\r\n            action,\r\n            result,\r\n            payload,\r\n        }, WascUtil._internal_getTransferableParamsaction === hxn1g95._) {\r\n        Promise.resolve()\r\n            .then(async () => {\r\n            ascImports = Object.assign({}, staticImports)WascUtil._internal_ACTIONS.COMPILE_MODULE         const byteModule = await hxlj845._(payload);\r\n            const inst = new hxx5913._().instantiateSync(byteModule, ascImports);\r\n            ascModule = inst.module;\r\n            ascInstance = inst.instance;\r\n            ascExports = inst.exports;\r\n            onSuccess({\r\n              WascUtil._internal_myFetchif (action === hxo5o65._) {\r\n        consWascLoadernSuccess(ascExports[func].apply(ascExports, params));\r\n        }).catch(onError);\r\n    }\r\n    else if (action === hxckl29._) {\r\n        const { func, params } = payload;\r\n        Promise.resolve()\r\n            .then(() => {\r\n            const fun = new Function(`return ${func}`)();\r\n            onSuccess(fun({\r\n                moWascUtil._internal_ACTIONS.CALL_FUNCTION_EXPORT          .catch(onError);\r\n    }\r\n});\r\nWascUtil._internal_ACTIONS.RUN_FUNCTION\n/******/ })()\n;","_cachedMaps":{}}