{"_valueIsBuffer":false,"_value":"(()=>{\"use strict\";const e=self,n=\"[OfflineWorker]\",t=\"::2.4\";console.info(n+\"executing.\"),e.addEventListener(\"install\",(function(e){console.info(n+\" install event in progress.\");const c=new URL(location.href).searchParams.get(\"jsonPath\");e.waitUntil(fetch(c).then((e=>e.json())).then((e=>caches.open(n+t).then((n=>e.map((e=>n.add(e))))))).then((()=>console.info(n+\" install completed\"))))})),e.addEventListener(\"fetch\",(function(e){\"GET\"===e.request.method?e.respondWith(caches.match(e.request).then((async c=>{if(c)return console.info(n+\" fetch event(cached): \",e.request.url),c;const o=await e.preloadResponse;if(o)return o;function s(){return console.info(n+\" fetch request failed in both cache and network.\"),new Response(\"Service Unavailable\",{status:503,statusText:\"Service Unavailable\",headers:new Headers({\"Content-Type\":\"text/html\"})})}return fetch(e.request).then((function(c){const o=c.clone();return console.info(n+\" fetch response from network.\",e.request.url),caches.open(n+t).then((n=>n.put(e.request,o))).then((()=>console.info(n+\" fetch response stored in cache.\",e.request.url))),c}),s).then((()=>console.info(n+\" fetch event(networked): \",e.request.url))).catch(s)}))):console.info(n+\" fetch event ignored.\",e.request.method,e.request.url)})),e.addEventListener(\"activate\",(function(c){console.info(n+\" activate event in progress.\"),c.waitUntil((async()=>{self.registration&&self.registration.navigationPreload&&await self.registration.navigationPreload.enable(),caches.keys().then((e=>Promise.all(e.filter((e=>!e.endsWith(t))).map((e=>caches.delete(e)))))).then((()=>console.info(n+\" activate completed.\")))})),e.clients&&e.clients.claim()}))})();"}